%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (marina) ()%%Title: (11-155.eps)%%CreationDate: 5/11/11 12:11 PM%%BoundingBox: 39 219 546 696%%HiResBoundingBox: 39.6025 219.7002 545.8281 695.8335%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 283.5 424.8936 283.5 424.8936%AI3_TileBox: -22.5356 29.1963 589.4648 821.1968%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 566.9291 850.3937%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -623 904.3936 1 1829 1029 18 0 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 120 8%%BeginData: 19900 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2FFF613DAFFD7DFF61153D61FD75FFAF85AF8BAF85AF3D3D1B3D%3DAFFD73FF1B1B143D151B143D1B3D141B158BFD71FFAF3D1BFD0B3D1B67%AFFD70FF3D3D1B3D1B3D1B3D1B3D1B3D1B3D153D85FD6EFFAFFD0F3D1B3D%8BFD6DFFAF363D3D3D143D3D3D143D3D3D143D1B3D3CFD6EFFAF61FD0E3D%61FD6FFFAFFD043D1BFD073D1561A9FD6EFFC9CFFF8B616761616167FD05%3D8BFD6DFFCAFFCABB92C9FD07FF853D3D3CAFFD6DFFFD04BBBABBB4C2CA%FD05FF613D61FD31FFCFCAC3CACAFD38FFCFBBB4BBB4BBB4BBB4BBC3FD04%FFAF85FD31FFC2BBB4B4BBC2C2FD38FFBBBBBABBBABBBABBB4C3FD36FFC2%B4B4BBB4BBC2C9C2FD36FFCABBB4BA92BBBABA92C9FD36FFC9BAB4BB92BB%B4B4BCC3C3FD36FFC9C3C2C9BBBABBCFFD37FFC9B4BBB4BBBABBB4BBC2C3%FD24FFA97E7E545A2F302F5A537E84A9FD09FFC2C2FD39FFC2BAB4BBB4BB%B4BBB4C2BCFD21FFA95A300707070D070D070D070D070D07305AAFFD41FF%C3B4BBBABBBABBBABBB4C2FD1FFF5A300707070D070D070D070D070D070D%070D070707307EFD05FFCACAC3C3FD05C2C9C3CACAFD25FFAFFD07FFC3BA%92BBB4BB92BBB4B4C2FD1DFFA92F0D073007300730073007300730073007%300D300730070D2FA9CAC9BBBBB4BAB4BBB4BBB4BBB4BAB4BBBCC9CAFD1F%FFAF8B3D3DFD08FFFD04BBBAFD04BBFD1CFFA85A0707070D070D070D070D%070D070D070D070D0730070D07300707014C92B4B4BBB4BBB4BBB4BBB4BB%B4BAB4BAB4BBBBCAFD1BFFAF611B151B1BAFFD07FFCFBABABABBBABBBACA%FD1BFFA93007300730073007300730073007300D3007300D3007300D3007%290606012893BBB4BBB4BBB4BBB4BBB4BBB4BBB4BBB4B4B4C3FD19FF8B1B%1B1B3D1B3D85FD09FFBBBBBABBBACAFD1BFF840D070D070D070D070D070D%070D070D070D070D070D070D070E07060106010601066FBA92BBB4BB92BB%B4BB92BBB4BB92BBB4B492BBCAFD16FF61151B143D153D1461FD09FFCA92%BBB4C2FD1BFFA930073007300D3007300D30070E070E0730070E0730070E%0D300728062906290629060793BBB4BBB4BBB4BBB4BBB4BBB4BBB4BBB4BB%B4BBCFFD14FF8B1B3D1B3D1B3D1B3D1BAFFD09FFC2BABBC3FD1BFF300730%070D0730070D0730073084A984A9848584857EA9300D0728060601060606%0128062892BBB4BBB4BBB4BBB4BBB4BBB4BBB4BBB4BBB4C2FD13FFAF153D%1B3D153D1B3D151B3DFD09FFC2C1BBCAFD1AFF84073007300D3007300D30%070EA9A92F5A84FD07FF0D2906290628062906280629064CB4BBB4BBB4BB%B4BBB4BBB4BBB4BBB4BBB4BBB4CAFD12FF3D1B1B3D1B3D1B3D1B3D1B3D61%FD08FFC9BBC2C9FD19FFAF070D070D070D070D070D070D07A97E0D07070D%84FD04FFA82F0106010606060106060601060699B4BBB4BB92BBB4BB92BB%B4BB92BBB4BB92B4BBFD11FFA93D153D143D153D143D153D141B61FD07FF%C3C198C9FD19FF5A0E0D300D300D300D300D300D3084FFFFFF7E30075AFD%04FF062806290629062906290629060728BBBABBB4BBBABBB4BBBABBB4BB%BABBB4BBB4BBCAFD10FF8B1B3D1B3D1B3D1B3D1B3D1B3D1B1B3DFD07FFC9%CFCFFD19FF300730070D0730070D0730070D07A9A85AA8FFFF5A075AFFFF%A829060606280606062806060628060692BBB4BBB4BBB4BBB4BBB4BBB4BB%B4BBB4BBB4CAFD10FF3D1B1B3D153D1B3D153D1B3D153D1B1B158BFD21FF%0D0E0D300D300D300D300D300D0EA885070D30FFFF5A0785FFAF06290629%062906290629062906290676B4BBBABBB4BBBABBB4BBBABBB4BBBABBB4BA%C3FD10FF3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B61FD1FFF7E0D070D%070E070D070E070D070E07A9FFA9360707FFFF0E07FFA828062806060628%06060628060606074BBAB4BBB4BB92BBB4BB92BBB4BB92BBB4BB92C2FD10%FF1B3D143D153D143D153D143D153D143D151B3CFD0BFFAFFF8585148BFD%0EFFA90D300D300D300D300D300D300D0E84FFFFFF840E36FF840E84FF06%290629062F0629062F0629062F0652BABBBABBBABBBABBBABBBABBBABBBA%BBBABBC2FD0FFFAF3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1BFD05FFAF%8B3D6761673D613D3D1B3D61FD0EFF7E0E0D0E07300D0E07300D0E070E07%A9A83684FF5A0D84FF075AA828062906280629062806290628060728BBB4%BBB4BBB4BBB4BBB4BBB4BBB4BBB4BBB4C1FD0FFFAF1B3D153D1B3D153D1B%3D153D1B3D153D1561FD04FF613D151B153D1B1B153D1B3D1561FD0EFF85%07300D300D300D300D300D300D30A9840736FFAF075AFF360DAF2829062F%0629062F0629062F06290652BABBB4BBBABBB4BBBABBB4BBBABBB4BBBABB%BBFD0FFF853D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B3DAFFFFF8B3D3D1B3D%3D3D1B3D3D3D1BFD043DFD0EFFA80D070E0D0E070E0D0E070E0D0E07A9FF%5AA8FFFF8484FF8484A82906280629062806290628062906074BBBB4BB92%BBB4BB92BBB4BB92BBB4BB92BBB4BBCAFD0EFF8B143D1B3D143D1B3D143D%1B3D143D1B1B84FF853D143D1B3D143D1B3D143D1B3D143D153DAFFD0EFF%0D300D300D300D300D300D300D3030AFA9AFA9AFA9AFA9AFA85A062F062F%282F062F282F062F282F069ABABBBABBBABBBABBBABBBABBBABBBABBBABB%BAFD0FFF61FD103DAF613D1BFD103DFD0FFF5A07300D0E0D300D0E0D300D%0E0D0E0D0E070E0D0E070E0D0D062906280629062806290628062F062892%BBBABBB4BBBABBB4BBBABBB4BBBABBB4BBB4BAC2FD0DFFAF3D153D1B3D1B%3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B%61FD0FFFA90E0D300D300D300D300D300D300D300D300D300D300D300D2F%062F282F062F282F062F282F282F4CBBBABBBABBBABBBABBBABBBABBBABB%BABBBABBBABBCAFD0CFF671BFD233D61FD10FF300D0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E06280629062806290628062906280699BA%BB92BBB4BB92BBB4BB92BBB4BB92BBB4BB92BBB4BBCAFD0AFF61143D1B3D%143D1B3D143D1B3D143D1B3D143D1B3D143D1B3D143D1B3D143D1B3D143D%1B3D148BFD11FF0D300E300D360E300D360E300D360E300D360E300D360E%2F282F282F282F282F282F282F0676BABBBABBBABBBABBBABBBABBBABBBA%BBBABBBABBBABBB4C1FD09FF8B1BFD253D85FD11FF85070E0D0E0D300D0E%0D300D0E0D300D0E0D300D0E0D0E0628062F2829062F2829062F062E98BB%BABBB4BBBABBB4BBBABBB4BBBABBB4BBBABBB4BBBABBB4BBCAFD06FF671B%3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B%3D3D3D1B3D3D3D15AFFD12FF850D300E300D300E300D300D300D360E360E%3736370E362F2F292F282F282F282F062F99BBBABBBABBBABBBABBBABBBA%BBBABBBABBBABBBABBBABBBABBB4C1CAFD04FF671BFD273DAFFD13FF5A07%0E0D0E0D0E0D0E0D360E370E370F150E370F150F370F370E360D2F282F06%2E6EBBBABB92BBBABB92BBBABB92BBBABB92BBBABB92BBBABB92BBBABB92%BBCAFFFF8B1B3D1B3D3D3D1A3D3D3D143D3D3D143D3D3D143D3D3D143D3D%3D143D3D3D143D3D3D143D3D3D143D3DFD15FF850E0E0E360E360E371537%153715371537153715371537153715370E36295299C1BBBBBABBBBBBBABB%BBBBBABBBBBBBABBBBBBBABBBBBBBABBBABBBBC1C1FFFFFF85360D36363D%36FD213D1B8BFD16FFAF300E0D3715150F3715150F3715150F3715150F37%15150F371515153775BABABBBABBBABBBABBBABBBABBBABBBABBBABBBABB%BABBBABBBBC2C1C8C9FD05FFA87E29FD04073014FD1D3D1B3D85FD18FF84%3715371537153715371537153715371537153715371537153D1B3D7CBABA%BBBABBBABBBABBBABBBABBBABBBABBBABBBABBBBC2C2C8C1C9FD0AFF070D%070D072F07363643FD1B3DFD19FF61153D14370F150E3715150E3715150E%3715150E371515143D1B3D151B58BABABBBABB98BBBABB98BBBABB98BBBA%BB92C1C1C2C1C2C1C1C2FD09FF7E07070DFD06070D3D3D3D363D3D3D363D%3D3D363D3D3D363D3D3D363D3D3D363D1B85FD07FFA97E8484FD0DFF8B1B%3D1B3D1B3D153D1537153715371537153715371537153D1B3D1B3D1B1B7C%BBBBBBBAC1BBBBBAC1BBBBBAC1BBBBBAC2C2C8C1C8C2C2C1C8CFFD08FF84%0730073007300730072F07363D43FD163DAFFD05FF843007302F0D0784FD%0AFFAF153D1B3D153D1B3D153D153D153D153D1537151515371515153D1B%3D153D1B3D99BBBABBBABBBABBBABBBABBBABBBBC2C1C2C1C2C1C2C1C2C1%FD09FF5A07070D070D070D070D070D073036FD153D61FD05FF2F0753AFA9%FFA97E0730AFFD08FF611B1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D1B3D15%3715371537153D1B3D1B3D1B5FBAC1BABBBAC1BABBBAC1BABBBBC8C2C2C1%C8C1C2C1C8C1C2CAFD08FF85070D0730072F0730072F0730072F3667FD13%3DFD05FF5A0784FFFF5A2FFFFFFF075AFD08FF3D153D143D153D143D153D%153D1B3D143D153D143D151514371537143D153D143D1499BABBBABB98BB%BABB98BBBBC2C1C2C1C2C1C2C1C2C1C2C9FD0AFF5A070D070D070D070D07%0D070D0707143D3D3D3C3D3D3D3C3D3D3D3C3D3D3D3C3D1B61FD04FFA807%7EFFFFFF07077EFFFFA90784FD07FF1B3D1B3D1B3D1B3D1B3D153D143D15%3D1B3D1B3D1B3D1B3D1537153D1B3D1B3D1B1B7CBBBBC1BAC1BBC1BAC1BB%C8C1C8C2C2C1C8C2C2C1C8C2FD0BFFAF3007300D3007300D3007300D3007%3037673D613D3D3D613D3D3D613D3D3D613D3DAFFD04FF7E2FFD04FF3007%AFFFFFFF5A2FFD06FF853D1B3D153D1B3D1B370E0E070E070D0D3D1B3D15%3D1B3D153D1515153D1B3D153D1B60BABBBABBBABBBABBBAC2C1C2C1C2C1%C2C1C2C1C2C1C8FD0BFF85070D0730070D0730070D0730070D0730FD103D%85FD05FF2F7EFF5A2F5A070D2F845AFF840DFD06FF8B153D1B3D1B3D1B36%0D0E0D0E070E0707073D1B3D1B3D1B3D1B3D1537153D1B3D1B3D3DC1BAC1%BABBBAC1BAC2C1C8C1C2C1C8C1C2C1C8C1C2C1CFFD0AFF2F0E0D3007300D%3007300D3007300D3007363D3D3D613D3D3D613D3D3D613D3D3DFD06FF30%7EA9070707300D0D07075AAF07FD06FF611B143D153D15370D36FD045A36%5A2F07073D1B3D143D153D143D153D143D153D153D99BA98BBBABB98C1C1%C2C1C2C1C2C1C2C1C2C1C2C1C1C2FD09FFA92F070D070D070D070D070D07%0D070D070D07373D3D3C3D3D3D3C3D3D3D3C3D3D8BFD06FF2F5AFF845A5A%070D2F5A2FAF840DFD06FF671B3D3D3D1B3D140E36A984857E858484072F%143D1B3D3D3D1B3D3D3D1B3D3D3D1B3D1BA0BAC1BBC1BAC1C1C8C1C8C2C2%C1C8C2C2C1C8C2C2C1C9FD0AFF0D300D300D300D300D300D300D300D300D%3030613D673D613D673D613D673D67FD07FF850DFD04FF300DAFFFFFFF5A%2FFD06FF3D1B153D1B3D15360D365A845A5A5A845A0D07363D1B153D1B3D%153D1B3D153D1B3D151B7CBABAC1BABBBAC2C1C2C1C2C1C2C1C2C1C2C1C2%C1C1C9FD0AFF5A070D070D070E070D0730070D0730070D073036FD0B3D85%FD07FFA80D7EFFFFAF070EA8FFFFAF0784FD06FF671B3D1B3D1B3D0E0E36%85848584858485070736FFAF3D1B3D3D3D1B3D3D3D1B3D3D3D1BA1BAC1BA%C1BAC1C1C8C1C2C1C8C1C2C1C2C1C2C1C8C9FD0CFF855A360D0E070E0D30%0D300D300D300D3007373D613D613D613D613D3D3DFD07FFA95A0D0E84FF%FF5A30FFFFAF0D5AFD07FF143D1B3D143D1B370D302F300D300D30070707%85FFFFAF3D143D1B3D143D1B3D143D1B1B7CBABABB98BBBBC2C1C2C1C2C1%C1C1C8C3CACAFFCFFD11FF84845A30070D070E070D070E070D0D613D3D3C%3D3D3D3C3D3D8BFD06FFA830070E2F0D30AFA9FFA87E0736A9FD06FF853D%3D3D1B3D3D3D1B3D0E300D300D3007300D61FD04FF853D3D3D1B3D3D3D1B%3D3D3D1BA7BAC1BAC1BAC2C1C8C1C8C1C8C9FD1CFF8407300D300D300D30%0D363D673D673D613D673D61AFFD05FFA9300D0E5AFF84360D300D300E85%FD07FFAF3D153D1B3D153D1B3D1B3D0D0E0730070E0E61FD05FFAF153D1B%3D153D1B3D153D1B3D9FC0BABB98C19FC29FC2C1C1C9FD1EFF5A07300D0E%07300D0E0737373D37613D613D3D61FD05FF840E0D0E5AFD04FFAF8485A8%FD09FF611B3D1B3D3D3D1B3D3D3D14300E3D146185AFFD06FF8B3D1B3D3D%3D1BFD053D3653282F2F2F072F072F2F5352A9A9FD1DFFAF300D300D300D%300D300F370F37153D3D613DAFFD05FF36073084FD11FF61143D1B3D143D%1B3D143D1514143D1B1B61FD08FF61153D143D1B3D1B3D0D070106FD0E07%2F7EA8FD1BFF5A0D070E0D0E070E0D150E370F150E37153DA9FD05FF5A5A%84FD11FF611BFD0C3D43FD043D61FD05FFAF671BFD043D43363006060129%062F0730072F0730072F0730072F070D07305AFD1AFF850D300D300D300D%3615371537153715370EC2C9FD16FFAF611B3D1B3D1B3D1B3D1B3D1B3D1B%3D1B3D1B3D1B3D1B61618BAFAF153D1B3D1B3D0D06000606060129070707%0D0707070D0707070D0707070D070707A9FD18FF840E0D300D0E0D0E0E37%0F370F150F37153792B4BBCFFD14FF611B3D3D3D1B3D3D3D1BFD073D1BFD%053D1B3D1B3D85611B3D3D3D0D280606062906060730072F0730072F0730%072F0730072F07300707077EFD17FF850D300D300E300D37153715371537%153736BBB4BBB4C9FD13FF3D1B143D1B3D143D1B3D143D1B3D143D1B3D14%3D1B3D143D1B3D143D1B3D153D0D060106010601060107070D0707070D07%07070D0707070D0707070D07070784FD16FF5A0E0D0E0D0E0D0E0E371515%0E371515153792B492BBB4C2FD13FF8567FD1B3D43302806290629062906%290730073007300730073007300730073007300730073007FD16FF5A0D30%0D360E300E3D153715371537153D1599B4BBB4BBB4C2FD14FF8B1B3D1B3D%3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1B3D3D3D1428060601060606%0106060D070D070D070D070D070D070D070D070D070D070D07072FFD14FF%AF0D300D300D360E371437143714371437141B76B4B4BBB4BBB4C2FD13FF%61FD1A3D2F0129062806290628062F072F0730070D072F070D0730072F07%30072F0730072F0730A9FD15FFA9FFAFFFAFC3999999BC999999BC999999%BBB4BBB4BBB4BBB4C3FD11FFAF3D143D1B3D143D1B3D143D1B3D143D1B3D%143D1B3D143D1B3D1B3601060106060601060106070D070D070707300D36%0D0D070D070D070D070D070D070D0784FD19FFC9B4BAB4B4B4BAB4B4B4BA%B4B4B4BBB4BB92BBB4BB92C9FD11FFFD193D432F28062906290629062807%30073007303661618B616137610D2F0730073007300730073061FD18FFCA%B4BBBABBB4BBBABBB4BBB4BBB4BBB4BBB4BBB4BBB4BBBBFD10FFAF3D15FD%183D2F0606062806060628060D070D073036FD0561363030610707070D07%0D070D0707143DFD17FFCAB4BAB4BBB4BBB4BBB4B4B4BBBBC2C2C9C2C2BB%BBB4BAB4B4C2FD10FFAFFD193D0629062906290629062F072F0730FD0761%8B61300D610D0D0730072F072F0D3D1BFD16FFC9B4BBBABBB4BBBABBB4BB%BBC9CAFD07FFCAC9BBBAB4BBCAFD10FF613D143D3D3D143D3D3D143D3D3D%143D3D3D143D3D3D143D36060628060606280628070D0707366161616061%6161606161303036070D070D070D07373D3D85FD13FFCAC2B4BA92BBB4BB%92BBB4BBC9FD07FFCAFD05FFC3BB92C3FD10FF8BFD173D3606290629062F%062907300D300D856161618B6161618B618B5A30613007300D3007303D3D%1BAFFD12FFC3BBB4BBBABBBABBBABBB4C2FFFFCAC2CAFFC3C9FFC2CAFFC9%C3FFFFCFC1BBFD0FFFAFFD173D430D06062906280628060D07300730FD0C%612F610D0D073007070E673D1B85FD0FFFCAC9BBB4B4BBB4BBB4BBB4BBB4%C9FFFFC2BAC3FFC3B4C2FFBBBBCAFFBBBAC3FFFFC2CAFD0EFF85FD183D36%0629062F0629062F0D300730368B618B6161618B6161618B615B36360730%073007363C431B8BFD10FFBABBBABBB4BBBABBB4BBB4C3FFFFBBB4BBFFCF%BBB4C9FFC2B4C2FFFFB4BAC2FFFFCFFD0EFF85143D3D3D363D3D3D363D3D%3D363D3D3D363D3D3D363D3D3D0D28062806280629070D070D0736616160%6161616061616160615A610D0D070D070E0606060E59C9C9CFCAFFCACFCA%FD08FFC992BBB4BB92BBB4BB92C2FFFF98B4B4CAFFC2B4B4C2FFBBB492C9%FFC392B4C2FD10FF85FD043D613D3D3D613D3D3D613D3D3D613D3D3D613D%3D3D36282F062F282F07300D300730308B618B618B618B618B618B618B61%300D3007300D2906290628B4FD08BBCAFD07FFC1BABBBABBBABBBABBCAFF%FFFFCFFFFFFFCAFFCAFFFFFFCAFFCFFFFFFFCAFD12FF85613D3D1BFD133D%0D2806280629060D0730070D070E5A8561856161618561616185615A070E%070D072F060606280675B4BBB4BAB4BBB4BAB4C2CAFD05FFC3BAB4BBB4BB%B4BAC2FFFFFFCAFFFFFFCAFFCFFFCFFFFFFFCAFFFFFFCFFFCFFFCFFD12FF%AFAF858B3D3D3D613D3D3D613D3D3D613D3D3D613D36062F282F062F0D30%07300D300736618B618B618B618B618B618B300E07300D30072906290629%0699BABBBABBBABBBABBB4BBC2FD05FFBBBBBABBBABBBACFFFC2BBBBBACF%FFC2BABBBAC9FFC2BABBBAC9FFC9B4BBBAC9FD17FF853D363D3D3D3C3D3D%3D3C3D3D3D3C3D362806290629070E070D070D070D075A61616085616160%85618B300D070D070D070D0628060606070699B4BBB4BB92BBB4BB92BABA%C9FFFFFFC392BBB4BB92C2FFCA92BBB4BBFFCFB4BA92BAC2FFBBBAB4BA98%FFC9BA92BAC2FD18FFAF3D3D613D673D613D673D613D673D3D282F282F07%300D300D300D300D300D61618B618B618B618B36300D300D300D300D2F06%290629060728BBBABBBABBBABBBABBBBBBB4C2CAFFFFC1BABBBABBC3FFC2%BBBABBBBFFC9BBBABBB4C9FFC2BABBBABBFFFFBABBBACAFD19FF61FD0E3D%2F062F282F0730070D0730070D070E075A618B6185618B360D0730070D07%30070E062806280629060606BBBABBB4BBBABBB4BBBABBB4BBC2FFC3BABA%BBB4C9FFBBB4BAB4C2FFC9B4BAB4B4C2FFBBBAB4BAB4CAFFBBB4BBCAFD19%FFAF3D613D613D613D613D613D613D672F29282F0D3007300D3007300D30%0D300D61618B618B60300D300D300D300D300D2F06290629062F06290699%BABBBABBBABBBABBBABBBABABBC9BBBBBABBC9FFC3C9C2C9C9FFCAC9C3C9%C2CFFFC9C2C9C3C9CAFFC9C3C3FD1BFF613C3D3D3D3C3D3D3D3CFD043D36%2828060E070D070E070D070E070D070D368B608B6136070E070D070E070D%070E0729062806280628060706BBBABB92BBBABB92BBBABB92BAB4BB92BB%B4CAFD33FF61613D613D673D613D673D613D67362F282F0D300D300D300D%300D300D300D36FD048B36300D300D300D300D300D30072F282F062F2829%0652BBBBBABBBBBBBABBBBBBBABBBBBBBABBBABBC9FFFD04C2C9FFC9FD04%C2CFFFC9C2C9C2C2CAFFC2C9FD1CFF613D613D3D3D613D3D3D613D3D3D61%282828300D0E07300D0E07300D0E070E0D5A3661360E07300D0E07300D0E%07300D0D0629062806292875BABBBABBBABBBABBBABBBABBBABBBABBBABB%B4C9FFC1B4BAB4C2FFC3B4BAB4B4C2FFBBBAB4BAB4CAFFBAC2FD1CFF6161%3D613D613D613D613D613D613D5A282F0D300D300D300D300D300D300736%618B618B300E0D300D300D300D300D300D2F062F282F75BBBABBBABBBABB%BABBBABBBABBBABBBABBBABBBABBC2FFC2BBBABBBBFFC9BBBABBBAC9FFC2%BABBBABBFFCFBBFD1CFFA93D3D3D3C613D3D3C613D3D3C613D3D3628280D%070E070D070E070D070E070D0D6160615A30070D070E070D070E070D070E%0D2F06290675BABBBABB98BBBABB98BBBABB98BBBABB98BBBABB92C1FFCA%92BBB4BBCACFBABA92BAC2FFBBBABABA99FFC9CAFD1CFF8B3D3D3D613D3D%3D613D3D3D613D3D3D612F2F2F300D300D300D300D300D300D36858B858B%360E0D300D300D300D300D300D300D2F282F28C1BABBBAC1BBBBBAC1BBBB%BAC1BBBBBAC1BBBBBABBBACFFFC2BBC1BBCFFFC2BBC1BBC9FFC2BBC1BAC9%FD1FFF85AF85AF85AF85AF85AF85AF85AF85AF857E072F07300D0E07300D%0E07300D0E0D3630360D300D0E07300D0E07300D0E07300D0E072F0652BA%BBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABAC2FD43FF360D300D30%0D300D300D300D300D300D300D0E0D300D300D300D300D300D300D300D30%0D2F2EBBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBCAFFCAC9%C9CAFFFFC9C9C9FFFFCFC9C9C9FD32FF5A0E0D0E070E0D0E070E0D0E070E%0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E0799BABB98BBBABB%98BBBABB98BBBABB98BBBABB98BBBABB92C1FFFF99BAB4CAFFC2B4BAC2FF%BBBA92C9FD33FF300E0D300D300D300D300D300D300D300D300D300D300D%300D300D300D300D300D300D85CAC1BAC1BBBBBAC1BBBBBAC1BBBBBAC1BB%BBBAC1BBBBBAC1BAC8FFFFC2BABBFFFFC1B4C9FFC2BACAFD34FF85070E0D%300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D%0D84FFCAC2BABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBAC2FF%FFC2BAC2FFC9BAC2FFC2CFFD36FF5A0D300D300D300D300D300D300D300D%300D300D300D300D300D300D300D300D300D5AFFFFFFCABBBBBABBBAC1BA%BBBAC1BABBBAC1BABBBAC1BABBBAC1BAC2FFFFCFC9CAFFC9C9FD22FFCAC1%C299C1BBC199C1BBBB99BBBBBB99BBBBC2CAFFFFFF840E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0DA9FD04FF%C3C2BABB98BBBABB98BBBABB98BBBABB98BBBABB98BBBABBC3FFFFFFCFFD%24FFBBBABAC9C2C9C2C9C2C3C2C3C2C3C2C9C2BAB4C2FD04FF5A0E0D300E%300D300E300D300E300D300E300D300E300D300E300D300E300D300E0E84%FD05FFCABBBAC1BBC1BAC1BBC1BAC1BBC1BAC1BBC1BAC1BABBBABAC2CFFD%25FFCAC1C2BBBBFD0BFFCABBBBC2B4FD04FFAF0D0E0D300D0E0D300D0E0D%300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D0E0DA9FD05FFC2BABBBA%BBBABBBABBBABABABBFD07BAC1C1C9C9FD27FFCFBACFCABABBFD09FFCABB%B4FFC9BBCFFD04FF5A0D300D300E300D300E300D300E300D300E300D300E%300D300E300D300D0E075AFD05FFCFBAC1BBC1BAC1BBBBBAC2C9C9C2C9C3%C9C9CACAFD2CFFCABBC9FFCABA98FD07FFC9BAB4CFFFC9B4FD05FFA80E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E070E0D0E0D5A5A85A8%FD05FFC2BA98BBBABB98BABBC9FD37FFBACFFFFFCABBBBFD05FFCABBBBFF%FFFFC9BBFD06FF360E0D360E300D360E300D360E300D360E300D360E300D%5A84AFA9FD09FFCAC1BAC1BBC1BAC1C2FD38FFCABBC9FFFFFFCAC1BACAFF%FFC9BABBFD04FFC9B4FD06FF850D0E0D300D0E0D300D0E0D300D0E0D300D%0E0D0E0D85FD0DFFC2BABBBABBBAC2CAFD3AFFBACAFD04FFCABBBAC9C2BA%BAFD05FFC3BBFD06FFAF360E300D360E300D360E300D360E300D360E300D%85FD0DFFCFBAC1BABABBCAFD3BFFCABBC9FFFFFFCABB92C2B4BB99BBC2FD%04FFC992FD07FF360E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D36FD0EFF%C2BA98BBC2FD3EFFBACFFFFFCABBBAFFFFFFCFFFC9BABBFFFFFFC3BBFD07%FF850E360E360E360E360E360E360E360E360E0E84FD0DFFCAC1BAC2CAFD%3EFFCAC1C9FFC9BABBFD07FFCABABAFFFFC9B4FD07FF840E0D0E0D300D0E%0D300D0E0D300D0E0D0E0DAFFD0DFFC2BAC9FD09FFAF85AF85AF85AF85AF%A9FFFFFFAF8B618B858B618B858585FD1FFFCFBACFCABBC2FD0AFFBBBAFF%C3BBCFFD06FFAF0D360E300D360E300D360E300D360E300D36FD0DFFCFC2%FD0AFF67FD041B151B1B1B153D85FFFF3D1B1B151B1B1B151B1B1B85FD1E%FFCAC198BABAC9C2C9C2C3C2C3C2C2BBC2BBB492B4BBFD07FFA80E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0DFD0DFFCFFD0AFFAF1B1B3C8B6185608B%613D1461FFAF143D618B848B858B853D1561FD1FFFCAC2C1C2BBC1BBC1BB%C1BBBBBBC2BBC2BCC2C2FD08FFAF0E360E360E360E360E360E360E360E36%0E36A9FD17FFAF3D3DFD07FFAFAFAFFFAFAFAFFD07FF851B61FD3AFF840E%0D360D0E0D360D0E0D360D0E0D360D0E0D85FD18FF3D3DAFFD05FF85FD05%3D1B3D1BAFFD05FF8B1561FD3AFF610D0E0D0E0E0E0D0E0E0E0D0E0E0E0D%0E0E0E36FD17FFAF3D3DFD06FFAFFD073D61AFFD05FF851B61FD3AFF5A60%5A605A845A605A845A605A845A605A845A84A8FD16FFAF143DAFFD07FFA9%AFA9FFA9AFA9FD06FF851461FD65FFAF3D3D8BAFAF858B858B3D3D61FFAF%3D3D67858B618B858B3D3D61FD66FF613D1B3D153D151B153D1B8BFFFF61%3D153D1B1B153D1B3D1BAFFD67FF858B858B858B8BAF85AFFD04FFAFAFA9%AFAFAFA9AFAFFD95FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--6 Bn%AI5_BeginGradient: (Unnamed gradient 13)(Unnamed gradient 13) 0 2 Bd[<CDCECECFCFD0D1D1D2D3D4D4D5D6D6D7D8D9D9DADADBDCDCDDDEDFE0E0E1E2E2E3E4E4E5E6E7E8E8E9E9EAEBEBEC><5C5D5F61636566686A6C6E6F71737577797A7C7E80828387898B8D8F91939496989A9C9E9FA1A3A5A7A9ABACAEB0>000<898887868584838281807F7E7D7C7B7A7978777675747371706F6E6D6C6B6A696867666564636261605F5E5D5C5B><CFCECECDCDCCCBCBCAC9C9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBEBDBCBCBBBABAB9B9B8B7B7B6B5B5B4B4B3>4 %_Br[0.92549 0.690196 0 0 0 0.356863 0.701961 2 50 100 %_BS%_0.92549 0.690196 0 0 0 0.356863 0.701961 2 50 100 Bs0.803922 0.360784 0 0 0 0.537255 0.811765 2 50 0 %_BS%_0.803922 0.360784 0 0 0 0.537255 0.811765 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 19)(Unnamed gradient 19) 0 2 Bd[<48494A4B4C4D4E4E4F50515253545555565758595A5B5C5C5D5E5F60626263646566676768696A6A6C6C6E6E7070717273747575767777>0<06060506050505050505040404040404030403030303020201020101000100000000000000000000000000000000000000000000000000>0<A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8C8B8A898887868584838281807F7E7D7C7B7A7978777675747372><EFEFEEEEEDEDECECEBEBEAEAE9E9E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D4>14 %_Br[0.466667 0 0 0 0.447059 0.831373 1 2 50 100 %_BS%_0.466667 0 0 0 0.447059 0.831373 1 2 50 100 Bs0.282353 0 0.023529 0 0.662745 0.937255 1 2 50 0 %_BS%_0.282353 0 0.023529 0 0.662745 0.937255 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 24)(Unnamed gradient 24) 0 2 Bd[0<8C8E8F909293959698999B9D9E9FA1A2A4A5A6A8A9ABACADAEB0B1B2B3B5B6B7B9BABBBCBDBEC0C1C2>101<8B8A898887868584838281807F7E7D7C7B7A7978777574737271706F6E6D6C6B6A6968676665646362>04 %_Br[0 0.760784 1 0 1 0.384314 0 2 50 100 %_BS%_0 0.760784 1 0 1 0.384314 0 2 50 100 Bs0 0.54902 1 0 1 0.545098 0 2 50 0 %_BS%_0 0.54902 1 0 1 0.545098 0 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 30)(Unnamed gradient 30) 0 2 Bd[<A4A4A5A5A6A7A7A8A8A8A8A9A9AAAAABACACADADAEAEAFAFB0B0B1B2B3B3B4B5><1E20222426282A2C2E30323436383A3C3F41434547484A4C4E4F51535557595B>000<B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A6A5A4A3A2A1A09F9E9D9C9B9A999897>14 %_Br[0.709804 0.356863 0 0 0 0.592157 1 2 50 100 %_BS%_0.709804 0.356863 0 0 0 0.592157 1 2 50 100 Bs0.643137 0.117647 0 0 0 0.717647 1 2 50 0 %_BS%_0.643137 0.117647 0 0 0 0.717647 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 39)(Unnamed gradient 39) 0 2 Bd[<D2D4D5D6D7D8D9DBDBDDDDDFE0E0E2E3E4E5E6E7E8E9EAECEDEDEFEFF1F2F3F4F5F6F8F9F9FBFCFCFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF><A2A4A3A5A7A7A9ABABADACAEB0B0B2B4B4B5B7B7B9BBBBBDBFBEC1C1C2C4C4C6C8C8C9CBCBCDCECED0D0D1D3D2D4D5D5D6D8D8D9DBDADBDCDCDDDDDDDEDEDFE0DFE1><2E2D2F2E2D2D2D2C2D2C2D2C2B2D2C2B2B2C2B2B2C2B2B2A2A2A29292A29292A2929282929292A2A2A2A2B2B2B2B2C2C2C2E2E2E2E2F2F2F31313131333332323434><06060707070707070707080808080808080808080808080708080707080707080808080808080909090909090A0A0A0A0A0B0B0B0B0C0C0C0D0E0E0E0F1010101111><4241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242322201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><626161605F5F5E5D5D5C5C5B5A5A5958585756565554545352525151504F4F4E4D4D4C4B4B4A494948484746464544444342424140403F3E3E3D3D3C3B3B3A393938><95959494949493939393929292919191919090908F8F8F8F8E8E8E8E8D8D8D8C8C8C8C8B8B8B8A8A8A8A898989898888888787878786868685858585848484848383>4 %_Br[1 0.882353 0.203922 0.066667 0 0.219608 0.513726 2 50 100 %_BS%_1 0.882353 0.203922 0.066667 0 0.219608 0.513726 2 50 100 Bs0.823529 0.635294 0.180392 0.023529 0.258824 0.384314 0.584314 2 50 0 %_BS%_0.823529 0.635294 0.180392 0.023529 0.258824 0.384314 0.584314 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 2 Bd[<8283838485858686868787878989898A8A8B8B8C8C8D8D8E8E8E8F8F90909091919192939393939494949595959696969697989898989899999A9A9A9A9A9A9B9C9C9C9C9C9C9C9C9D9D9D9D9E9E9E9E9E9E9E9F9F9F9F9F9F9FA0>0<02020202010102020202020201020202020202020202020202020302020202020203020202020202020302020202020202010101010202020201010101010101000000000000000000000000000000000000000000000000000000>0<5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D9D9D9D9D8D8D8D8D8D8D8D8D7D7D7D7D7D7D7D6D6D6D6D6D6D6D6D5D5D5D5D5D5D5D4D4D4D4D4D4D4D4D3D3D3D3D3D3D3D2D2D2D2D2D2D2D2D1D1D1D1D1D1D1D0D0D0D0D0D0D0D0CFCFCFCFCFCFCFCECECECECECECECECDCDCDCD>14 %_Br[0.627451 0 0 0 0 0.803922 1 2 50 100 %_BS%_0.627451 0 0 0 0 0.803922 1 2 50 100 Bs0.509804 0 0.007843 0 0.356863 0.85098 1 2 50 0 %_BS%_0.509804 0 0.007843 0 0.356863 0.85098 1 2 50 0 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7907.8833 8616.3486 m-7816.0479 8616.3486 L-7816.0479 8612.0693 L-7907.8833 8612.0693 L-7907.8833 8616.3486 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7907.6631 8613.6689 m-7908 8613.7354 -7907.4814 8613.9248 -7907.8833 8613.7822 C-7907.8379 8613.6641 -7907.7725 8613.5752 -7907.6631 8613.6689 Cf-7817.1675 8613.835 m-7818.2529 8614.5977 -7819.6816 8613.8271 -7820.8701 8614.3135 C-7821.0098 8614.3457 -7820.8354 8613.8955 -7821.1484 8613.9961 C-7822.3008 8614.5889 -7824.1162 8614.2354 -7825.5195 8613.7783 C-7825.4346 8613.6602 L-7825.7021 8613.5752 -7826.0283 8613.9658 -7826.3115 8613.9111 C-7826.3135 8613.833 -7826.2207 8613.7998 -7826.2861 8613.6914 C-7826.3574 8613.9287 -7826.7979 8613.8018 -7826.9189 8613.9775 C-7827.0303 8613.8857 -7827.0195 8613.6982 -7827.1641 8613.5938 C-7827.3262 8613.8633 L-7827.7769 8614.5029 -7828.4209 8613.8193 -7829.0361 8614.1494 C-7829.0063 8614.0869 -7828.9453 8614.0381 -7828.9941 8613.9775 C-7829.9814 8614.3662 -7831.2168 8614.293 -7832.3208 8614.4365 C-7832.2769 8614.3418 -7832.2363 8614.1689 -7832.3008 8614.0615 C-7832.3555 8614.3447 -7832.6963 8614.416 -7832.9922 8614.4717 C-7833.1255 8614.1807 -7833.4995 8614.7373 -7833.8467 8614.5762 C-7833.8169 8614.5127 L-7834.0732 8614.8174 -7834.1973 8614.3369 -7834.4053 8614.7021 C-7834.5684 8614.4736 L-7834.6807 8614.8838 -7834.9395 8614.2607 -7835.1514 8614.4697 C-7835.1445 8614.5537 L-7835.3442 8614.6533 -7835.4482 8614.4473 -7835.6338 8614.5166 C-7835.6514 8614.4697 L-7836.0854 8614.5762 -7836.3379 8614.3486 -7836.3271 8614.6689 C-7836.4795 8614.4121 -7835.9063 8614.5518 -7836.1455 8614.1777 C-7837.5732 8614.5088 -7839.0459 8614.4434 -7840.4834 8614.4502 C-7840.6465 8614.3213 -7840.7505 8614.2822 -7840.7871 8614.1602 C-7840.9307 8614.2256 -7841.3281 8614.2197 -7841.4585 8614.3838 C-7841.4102 8614.377 -7841.5513 8614.2197 -7841.6274 8614.2041 C-7841.8887 8614.083 -7841.9131 8614.5557 -7842.2002 8614.4121 C-7842.0859 8614.3271 -7842.0469 8614.2236 -7842.0854 8614.1045 C-7842.3301 8614.3545 -7842.6577 8614.3145 -7842.9473 8614.3955 C-7842.9023 8614.3418 -7842.8325 8614.3096 -7842.8433 8614.209 C-7843.1602 8614.4922 -7843.4209 8614.1494 -7843.6982 8614.3281 C-7843.5947 8614.1436 L-7844.0415 8613.9189 -7843.7266 8614.5303 -7844.1128 8614.3975 C-7844.02 8614.3389 -7844.0527 8614.2666 -7844.0361 8614.1914 C-7844.3965 8614.5273 -7844.9795 8614.416 -7845.3389 8614.5303 C-7845.3174 8614.5049 -7845.3232 8614.4541 Y-7845.7148 8614.4961 -7846.1245 8614.3916 -7846.5552 8614.5381 C-7846.7119 8614.4561 -7846.5039 8614.0869 -7846.9185 8614.1553 C-7846.9033 8614.5264 -7847.6221 8614.3076 -7847.3779 8614.7275 C-7847.7319 8614.667 -7848.2925 8614.5273 -7848.5283 8614.6533 C-7848.3691 8614.5127 -7848.7007 8614.2002 -7848.4063 8614.1689 C-7848.6289 8613.9434 L-7848.5957 8613.792 -7848.3999 8613.9951 -7848.4707 8613.8037 C-7848.6182 8613.8193 -7849.0479 8613.9658 -7849.1797 8613.9053 C-7849.4531 8614.1328 -7849.7041 8614.5576 -7850.1465 8614.6045 C-7849.9385 8614.46 -7850.2646 8614.1953 -7850.1235 8614.1318 C-7850.7407 8614.8418 L-7850.8877 8614.8594 -7850.7725 8614.5498 -7850.9854 8614.6465 C-7850.9746 8614.7441 -7851.0674 8614.8057 -7851.1318 8614.8857 C-7851.1875 8614.8418 -7851.7441 8614.9775 -7851.8081 8614.6113 C-7851.8735 8614.4697 -7851.5684 8614.5361 -7851.7314 8614.4053 C-7852.0029 8614.4082 -7852.0151 8614.5342 -7852.2871 8614.54 C-7852.2925 8614.4912 L-7852.4717 8614.4365 -7852.8213 8614.6465 -7852.6265 8614.8486 C-7852.5015 8614.8594 -7852.6738 8614.6289 -7852.4888 8614.7354 C-7852.6152 8614.9473 -7852.9312 8615.0068 -7853.2031 8615.0098 C-7853.1104 8614.9521 -7853.1216 8614.8545 -7853.0845 8614.751 C-7853.4497 8615.0381 -7853.8369 8615.1289 -7854.2451 8615.249 C-7854.2515 8615.4229 -7854.0928 8614.9326 -7854.0327 8615.0244 C-7854.5557 8614.7832 -7855.1128 8615.3662 -7855.5479 8615.0137 C-7855.4766 8614.9834 -7855.5098 8615.2607 -7855.5146 8615.2119 C-7855.7666 8615.1904 -7855.7549 8614.9385 -7855.9189 8615.0313 C-7855.9355 8614.8838 -7856.1255 8615.0791 -7856.2944 8615.124 C-7856.3818 8615.2305 -7856.3384 8615.0518 -7856.1914 8615.0361 C-7856.4268 8615.1602 -7857.3691 8615.3877 -7857.9131 8615.1729 C-7857.9023 8615.2705 -7858.2471 8615.5313 -7858.3721 8615.5205 C-7858.3232 8615.292 L-7858.4375 8615.1553 -7858.7422 8615.3115 -7858.7632 8615.1162 C-7859.0303 8615.3936 -7857.7344 8614.8799 -7858.0957 8615.0938 C-7858.1895 8614.9033 -7858.5991 8615.458 -7858.5215 8615.1465 C-7858.7725 8615.1553 -7859.0161 8615.4121 -7859.2559 8615.1982 C-7859.1865 8615.2354 -7859.0522 8614.8809 -7859.2549 8614.8975 C-7859.6123 8614.9385 -7859.3564 8615.0068 -7859.6465 8615.083 C-7859.8281 8615.1768 L-7859.8398 8615.3994 -7860.1475 8615.1465 -7860.0146 8615.3955 C-7860.0586 8615.2119 -7860.5337 8615.5088 -7860.4971 8615.1396 C-7860.4473 8614.8486 L-7860.6016 8614.8701 -7860.7002 8615.1553 -7860.8213 8615.2832 C-7860.8418 8615.2568 -7860.8823 8615.1982 -7860.8745 8615.1514 C-7860.8994 8615.5967 -7861.2432 8615.1143 -7861.4268 8615.458 C-7861.7505 8615.3037 -7862.2495 8615.4434 -7862.4023 8615.167 C-7862.6514 8615.3018 -7862.8784 8615.4609 -7863.1621 8615.3662 C-7863.1055 8615.3242 -7863.0283 8615.3115 -7863.0122 8615.2158 C-7863.1904 8615.085 -7863.2344 8615.2021 -7863.3975 8615.2744 C-7863.3608 8615.208 -7863.7539 8615.0137 -7863.9521 8614.8564 C-7864.1992 8614.9893 -7864.1143 8615.2295 -7864.1392 8615.376 C-7864.3652 8614.9365 -7864.8379 8615.6592 -7865.1211 8615.2607 C-7865.0352 8615.2002 -7864.7598 8615.0449 -7864.9658 8614.9346 C-7865.1919 8614.4961 -7865.4219 8615.2578 -7865.7861 8615.0479 C-7865.6968 8615.4121 L-7865.8594 8615.1865 -7866.2334 8615.624 -7866.1963 8615.2529 C-7866.3184 8615.3838 -7866.6265 8615.1318 -7866.5859 8615.4873 C-7867.1846 8615.1865 -7868.0425 8615.6689 -7868.4102 8615.0313 C-7868.4961 8615.0908 -7868.7104 8615.0303 -7868.6665 8615.2129 C-7868.5239 8615.4111 -7868.4673 8615.0713 -7868.4141 8615.2061 C-7868.4912 8615.2168 -7868.5078 8615.3145 -7868.5161 8615.3633 C-7868.7021 8615.2822 -7868.8486 8615.2568 -7868.6729 8614.9609 C-7869.0869 8614.7412 -7869.1001 8615.5654 -7869.6274 8615.4258 C-7869.6035 8615.2793 -7869.6436 8615.2236 -7869.7979 8615.2471 C-7870.0903 8615.499 L-7870.4312 8615.4404 -7870.2842 8615.1641 -7870.2925 8614.915 C-7870.4746 8614.958 -7870.6973 8614.9463 -7870.7803 8615.1318 C-7871.0015 8614.8193 L-7870.8398 8615.0449 -7871.1514 8614.9697 -7871.2368 8615.0303 C-7871.1514 8614.9697 L-7871.1846 8614.8633 -7871.3955 8614.9287 -7871.5024 8614.96 C-7871.4766 8615.1143 -7871.2617 8615.1768 -7871.1445 8615.2217 C-7871.2373 8615.3311 -7871.3823 8615.3057 -7871.5059 8615.4346 C-7871.4648 8615.1904 -7871.8027 8615.2607 -7871.9473 8615.2354 C-7872.1133 8615.1826 -7872.1348 8615.4541 -7872.1831 8615.4463 C-7872.1875 8615.3193 -7872.4541 8615.4248 -7872.3247 8615.2471 C-7872.2681 8615.2061 -7872.1953 8615.3701 -7872.1016 8615.2578 C-7872.2109 8615.1641 -7872.1982 8614.9434 -7872.4258 8615.1045 C-7872.5967 8615.2256 -7872.3818 8615.5869 -7872.7061 8615.4326 C-7872.6211 8615.3721 -7872.6055 8615.2744 -7872.5391 8615.1865 C-7872.8433 8615.0596 L-7872.8564 8615.2822 L-7872.8975 8615.2256 -7872.8691 8615.2061 -7872.8877 8615.1768 C-7872.9785 8615.4111 -7873.3521 8615.249 -7873.4209 8615.5127 C-7873.5742 8615.5361 -7873.7441 8615.3584 -7873.8906 8615.333 C-7873.8623 8615.3135 L-7874.0415 8615.1826 -7874.2793 8615.2686 -7874.4297 8615.4189 C-7874.4219 8615.3701 L-7874.5195 8615.3525 -7874.7505 8615.3877 -7874.8735 8615.5186 C-7875.1201 8615.3506 -7874.9561 8614.6777 -7875.2295 8614.958 C-7875.48 8614.9658 -7875.6221 8615.3662 -7875.5215 8615.5088 C-7875.9717 8615.3584 -7876.4834 8615.7217 -7876.9009 8615.376 C-7876.9658 8615.4658 -7876.9248 8615.5225 -7877.0586 8615.5752 C-7877.7197 8615.4873 -7878.4551 8615.8389 -7878.9814 8615.4014 C-7878.79 8615.3076 -7878.9688 8615.1777 -7878.9727 8615.0518 C-7879.1309 8615.251 -7879.1631 8614.8447 -7879.2197 8615.1865 C-7879.2041 8615.3877 -7879.2197 8615.4854 -7879.0337 8615.5664 C-7879.4282 8615.6748 -7880.0283 8615.6748 -7880.2471 8615.4873 C-7880.1377 8615.5801 -7880.2227 8615.6416 -7880.3086 8615.7021 C-7880.2803 8615.3809 -7880.5713 8615.333 -7880.7915 8615.4463 C-7880.8223 8615.6416 L-7880.9658 8615.4404 L-7881.0503 8615.5029 -7881.0591 8615.8506 -7881.2773 8615.6631 C-7881.2891 8615.5869 -7881.3018 8615.5098 -7881.3418 8615.4541 C-7881.5693 8615.6143 -7881.8906 8615.8857 -7882.1377 8615.7197 C-7882.3398 8615.4346 L-7882.4453 8615.4658 -7882.6235 8615.6377 -7882.4375 8615.7197 C-7882.8594 8615.5479 -7883.1309 8615.5264 -7883.2646 8615.2793 C-7883.9912 8615.8809 -7885.0459 8615.9053 -7885.8906 8615.8623 C-7885.8652 8615.7158 L-7886.0923 8615.5791 -7885.9834 8615.9717 -7886.1416 8615.8701 C-7886.0684 8615.7305 -7886.3145 8615.5664 -7886.1362 8615.3955 C-7886.4609 8615.2412 -7886.5547 8615.6494 -7886.7656 8615.7158 C-7886.7979 8615.9082 -7886.5957 8615.5928 -7886.6367 8615.8369 C-7886.6729 8615.9053 -7887.0859 8615.6865 -7887.1362 8615.9775 C-7887.2178 8615.8633 -7887.1543 8615.6494 -7887.1104 8615.5313 C-7887.3086 8615.6729 L-7887.5513 8615.333 -7886.7559 8615.0654 -7887.0107 8614.6465 C-7887.1934 8614.6914 L-7887.3682 8614.3877 -7886.71 8614.3486 -7887.1689 8614.2441 C-7887.3682 8614.3877 -7887.5381 8614.8096 -7887.3608 8614.9385 C-7887.7754 8615.0186 -7887.5527 8615.6318 -7887.9985 8615.6074 C-7888.1201 8615.4365 -7887.6416 8615.5664 -7887.7275 8615.3271 C-7887.9375 8615.0928 -7888.1484 8615.458 -7888.3354 8615.376 C-7888.1279 8615.4854 -7888.3032 8615.7793 -7888.4375 8615.833 C-7888.6641 8615.6953 -7888.29 8615.5576 -7888.6113 8615.5273 C-7888.6641 8615.6953 -7888.9595 8615.8213 -7888.7041 8615.9385 C-7888.8203 8616.3193 -7889.0381 8615.833 -7889.2129 8616.1279 C-7889.3174 8615.8594 -7888.8823 8615.5088 -7889.2354 8615.375 C-7889.1792 8615.6328 -7889.6704 8615.7256 -7889.4839 8616.1074 C-7889.6221 8616.0342 -7889.6367 8615.8311 -7889.5361 8615.6729 C-7889.7334 8615.5137 -7890.0151 8616.1436 -7890.0801 8615.6318 C-7890.1479 8615.8955 L-7890.21 8615.8096 -7890.2983 8615.7441 -7890.3994 8615.6025 C-7890.5732 8615.5977 -7890.96 8615.96 -7890.9443 8615.5615 C-7891 8615.6025 -7891.3975 8615.585 -7891.2441 8615.8594 C-7890.9971 8616.0273 -7890.96 8615.6592 -7890.8223 8616.0313 C-7890.9971 8615.7275 -7891.1787 8616.0713 -7891.3213 8616.1729 C-7891.3447 8616.0186 L-7891.4297 8616.0791 -7891.6255 8616.0449 -7891.6787 8616.2119 C-7891.6133 8616.124 -7891.6475 8616.0186 -7891.7148 8615.9814 C-7891.8042 8616.2158 L-7892.1494 8616.333 -7891.8857 8615.8037 -7892.2217 8615.8721 C-7891.9663 8615.6904 L-7892.0225 8615.7295 -7892.1367 8615.5098 -7892.2979 8615.583 C-7892.3604 8615.7969 -7892.4775 8616.0537 -7892.5313 8616.2197 C-7892.7207 8616.3135 -7892.6162 8615.9785 -7892.8027 8616.1982 C-7892.5586 8615.9404 L-7892.5215 8615.8701 -7892.7231 8615.5869 -7892.9761 8615.5928 C-7893.1377 8615.667 -7893.3887 8615.9756 -7893.1338 8616.0928 C-7893.2607 8616.0967 -7893.4385 8615.9658 -7893.3379 8615.8096 C-7893.6255 8615.8838 -7893.2998 8616.04 -7893.5479 8616.1729 C-7893.6494 8616.0303 -7893.9658 8615.8271 -7894.1563 8615.6201 C-7893.8975 8615.2617 L-7894.0693 8615.2578 L-7893.8467 8614.9717 -7894.1826 8615.04 -7894.0566 8614.7373 C-7894.1743 8614.6904 -7894.3169 8614.793 -7894.4307 8614.8721 C-7894.0864 8615.3564 -7894.8159 8615.5342 -7894.7158 8615.9756 C-7895.1875 8616.0967 -7895.0107 8614.9014 -7895.5024 8615.5928 C-7895.4219 8615.708 -7895.6533 8616.0439 -7895.3564 8615.916 C-7895.6494 8615.8682 -7895.5557 8616.3594 -7895.9014 8616.1768 C-7895.6455 8615.9951 -7896.1763 8615.7295 -7895.8066 8615.4658 C-7895.8311 8615.6113 -7895.6001 8615.5762 -7895.5435 8615.5361 C-7895.6641 8615.3662 -7895.5186 8615.0908 -7895.8184 8615.0908 C-7896.0015 8615.1328 -7896.2524 8615.1416 -7896.2158 8615.3721 C-7896.2085 8615.625 -7895.9365 8615.3447 -7896.0537 8615.6006 C-7896.4185 8615.6885 -7896.4795 8615.3037 -7896.6304 8615.7529 C-7896.3999 8615.7168 -7896.3423 8615.9775 -7896.3467 8616.1514 C-7896.6143 8616.2568 L-7896.5625 8616.0889 L-7896.9922 8615.9678 -7896.6895 8616.3936 -7897.1055 8616.3486 C-7897.3008 8616.0166 L-7897.2017 8615.7305 -7896.6953 8616.1436 -7896.7695 8615.6777 C-7897.04 8615.6592 -7897.1299 8615.8955 -7897.3848 8615.7754 C-7897.3281 8615.7354 -7897.2505 8615.7236 -7897.1943 8615.6826 C-7897.2915 8615.667 -7897.3877 8615.0498 -7897.7734 8615.4111 C-7897.9727 8615.5518 -7897.8262 8615.5762 -7897.8311 8615.751 C-7898.2656 8615.8037 -7898.3955 8615.9814 -7898.6753 8616.0088 C-7898.6177 8615.6689 -7899.1699 8615.9756 -7898.8608 8615.6279 C-7898.7188 8615.8271 -7898.0903 8615.8076 -7897.9365 8615.4834 C-7898.0947 8615.0801 -7897.5952 8615.54 -7897.5024 8615.1318 C-7897.8506 8615.1221 -7897.8335 8614.7256 -7897.8896 8614.4658 C-7897.9863 8614.4473 -7898.0801 8614.5576 -7898.1377 8614.5977 C-7898.1787 8614.8418 -7898.0522 8614.8389 -7898.0449 8615.0908 C-7898.4336 8615.0244 -7898.8081 8615.1602 -7899.0225 8615.3994 C-7899.1523 8615.2783 -7899.1113 8615.0342 -7898.9575 8615.0098 C-7899.4199 8615.083 -7899.9141 8615.0498 -7900.3535 8614.9756 C-7900.0693 8615.375 -7900.8433 8615.0693 -7900.6494 8615.4014 C-7900.4141 8615.4912 -7900.2119 8615.7754 -7900.3418 8615.9541 C-7900.4888 8615.9287 -7900.3369 8615.7793 -7900.3984 8615.6943 C-7900.5859 8615.9121 -7900.6895 8615.3447 -7900.8735 8615.6885 C-7900.4512 8615.5596 -7900.7915 8615.2021 -7900.7139 8614.8896 C-7901.0186 8615.0654 -7900.7007 8614.667 -7901.0024 8614.667 C-7901.3057 8614.8408 -7901.6787 8614.9775 -7902.0161 8615.0449 C-7902.4399 8614.749 -7903.0898 8615.04 -7903.4683 8615.0518 C-7903.6665 8614.8936 -7903.5322 8614.54 -7903.7471 8614.4785 C-7903.9995 8614.4854 -7903.5601 8614.8594 -7903.9336 8614.6982 C-7903.8975 8614.6279 L-7904.0107 8614.709 -7904.5825 8614.3877 -7904.6929 8614.8955 C-7904.5776 8614.5127 L-7904.6475 8614.4775 -7904.7119 8614.5654 -7904.7695 8614.6064 C-7904.7725 8614.4814 -7904.8535 8614.3682 -7904.7402 8614.2861 C-7904.9707 8614.0225 -7905.2241 8614.3281 -7905.4746 8614.3389 C-7905.3135 8614.5654 L-7905.7422 8614.7432 -7906.0293 8614.5186 -7906.4443 8614.5977 C-7906.4316 8614.376 L-7906.6787 8614.5088 L-7906.6182 8614.293 -7906.8447 8614.1553 -7906.9751 8614.335 C-7906.3335 8613.792 L-7906.1553 8613.9229 -7906.5283 8614.0596 -7906.4165 8614.2783 C-7906.3213 8614.4697 -7905.9375 8614.4082 -7905.8755 8614.1953 C-7906.0225 8614.1709 -7906.0293 8614.2197 -7906.1436 8614.2998 C-7906.1919 8613.9912 -7905.9688 8614.0029 -7905.8584 8613.7969 C-7905.9355 8613.8096 -7906.0449 8613.7158 -7906.0615 8613.8135 C-7905.9102 8613.6631 -7905.7578 8613.6396 -7905.5059 8613.6318 C-7905.6763 8613.7529 -7905.4131 8613.8232 -7905.4775 8613.9111 C-7905.4575 8613.6396 -7905.2168 8613.5557 -7904.9053 8613.6318 C-7904.6831 8613.9463 -7904.3208 8613.4297 -7903.96 8613.5166 C-7904.1064 8613.792 -7904.2935 8614.0127 -7904.5127 8614.124 C-7904.2861 8614.2617 -7904.2607 8614.1162 -7904.0337 8614.2549 C-7903.9238 8614.0498 -7903.8457 8613.7354 -7903.5503 8613.6104 C-7903.5342 8613.8135 L-7903.2666 8613.709 -7903.2666 8613.4082 -7902.9258 8613.4658 C-7902.3418 8613.5654 -7901.7407 8613.5654 -7901.2949 8613.5908 C-7901.2783 8613.793 L-7901.0303 8613.3594 -7900.4521 8613.6328 -7900.1182 8613.4404 C-7899.5503 8613.6357 -7898.8848 8613.2471 -7898.5938 8613.5967 C-7897.5913 8613.4404 -7896.7148 8613.2881 -7895.6768 8613.3623 C-7895.8516 8613.6572 L-7895.6655 8613.4404 -7895.7305 8613.8271 -7895.5479 8613.7832 C-7895.7578 8613.5479 -7895.2949 8613.4775 -7895.1665 8613.2969 C-7894.7041 8613.5264 -7894.1104 8613.2754 -7893.7007 8613.0693 C-7893.6846 8613.2725 L-7893.2705 8612.8916 -7892.7759 8613.2256 -7892.2598 8613.2881 C-7892.2007 8613.3721 -7892.1074 8613.5625 -7891.9536 8613.54 C-7891.6738 8613.2119 -7891.5273 8613.2354 -7891.1167 8613.0303 C-7890.8169 8613.0303 -7890.3301 8613.1113 -7890.0254 8613.2393 C-7888.8975 8612.7783 -7887.7456 8613.0732 -7886.5732 8612.7959 C-7886.4888 8613.0342 L-7885.3521 8612.5244 -7883.9541 8612.9873 -7882.9839 8612.7256 C-7883.0776 8613.1328 L-7882.7734 8613.2578 -7882.3843 8613.0264 -7882.4619 8612.7373 C-7882.1567 8612.8623 -7881.7007 8612.54 -7881.5068 8612.875 C-7881.1953 8612.9502 -7881.1255 8612.6865 -7880.8662 8612.6318 C-7880.2422 8612.7861 -7880.0107 8612.751 -7879.4224 8612.6748 C-7879.5684 8612.6494 L-7879.6328 8612.7393 -7879.6387 8612.9121 -7879.4922 8612.9385 C-7879.2725 8612.8242 -7878.6846 8613.0479 -7878.9033 8612.5615 C-7878.2754 8612.8418 -7877.4385 8612.333 -7876.8271 8612.7119 C-7876.8789 8612.5791 -7876.7246 8612.5537 -7876.6602 8612.4639 C-7876.1089 8612.458 -7875.5293 8612.7295 -7875.0898 8612.5029 C-7875.0024 8612.5693 -7875.2295 8612.7295 -7875.0049 8612.7432 C-7874.8721 8612.6914 -7875.0024 8612.5693 -7874.8384 8612.4951 C-7873.9453 8612.2471 -7873.0303 8612.751 -7872.2188 8612.6865 C-7870.7754 8612.4297 -7869.2695 8612.5596 -7867.8867 8612.5166 C-7867.9023 8612.6143 L-7867.4395 8612.2412 -7866.8159 8612.9961 -7866.4463 8612.4346 C-7866.3369 8612.5273 -7866.0283 8612.4785 -7866.1094 8612.667 C-7865.7407 8612.4033 -7865.0771 8612.915 -7864.5439 8612.5801 C-7864.5928 8612.5713 -7864.6211 8612.5908 -7864.6777 8612.6328 C-7864.1392 8612.8486 -7863.6641 8612.5537 -7863.0957 8612.749 C-7863.1533 8612.791 -7863.2583 8612.8213 -7863.2754 8612.9189 C-7863.0557 8613.1064 -7862.7549 8612.5068 -7862.6348 8612.9775 C-7862.5088 8612.9736 -7862.5449 8612.7412 -7862.6221 8612.7549 C-7861.3779 8612.9385 -7860.0498 8612.6377 -7858.7549 8612.5303 C-7857.8271 8612.8115 -7858.6982 8613.3232 -7857.9663 8612.9717 C-7857.9063 8613.0625 -7857.9229 8612.792 -7857.9131 8612.8896 C-7857.6299 8612.7578 -7857.4717 8613.415 -7857.2754 8613.1689 C-7857.3564 8612.8799 -7857.1445 8613.0068 -7857.1387 8612.8311 C-7856.5713 8613.0186 -7856.4575 8613.2793 -7856.0098 8613.0596 C-7856.0435 8613.2119 L-7855.5186 8612.7822 -7854.9102 8613.0127 -7854.4673 8612.5166 C-7851.5728 8612.4258 -7848.7983 8612.1514 -7845.9761 8612.0938 C-7843.1865 8612.1885 -7840.4551 8611.9658 -7837.6221 8612.2295 C-7836.9585 8612.6289 -7836.9087 8612.6182 -7836.1797 8612.4561 C-7836.2095 8612.5205 -7836.2549 8612.5361 -7836.2061 8612.5967 C-7836.1699 8612.2686 -7835.6929 8612.5654 -7835.6235 8612.2529 C-7834.5762 8612.3135 -7833.6113 8612.2236 -7832.5337 8612.2217 C-7832.7041 8612.2568 -7832.7896 8612.5244 -7832.5869 8612.5029 C-7832.3755 8612.293 L-7832.3408 8612.3857 L-7832.2021 8612.3369 -7832.0513 8612.1748 -7832.1943 8612.0693 C-7829.4873 8611.7861 -7826.8242 8612.4434 -7824.1729 8612.3633 C-7823.5439 8612.5 -7822.6475 8612.375 -7821.9629 8612.3076 C-7819.9355 8612.7441 -7818.1084 8613.0977 -7816.0479 8612.792 C-7816.3174 8613.6396 -7817.1675 8613.835 Vf-7907.2578 8613.6357 m-7907.1855 8613.7998 -7906.9497 8613.8896 -7907.1377 8614.1074 C-7907.1611 8613.9541 -7907.2822 8613.7822 -7907.2578 8613.6357 Cf-7900.9619 8615.3232 m-7900.9536 8615.2744 -7900.8721 8615.3896 -7900.8521 8615.416 C-7900.9297 8615.4287 -7901.0024 8615.5664 -7901.0645 8615.4814 C-7900.9854 8615.4697 -7900.9976 8615.3916 -7900.9619 8615.3232 Cf-7899.3521 8615.4209 m-7899.3765 8615.5664 -7899.7207 8615.6826 -7899.9238 8615.7002 C-7899.3521 8615.4209 Lf-7897.8521 8616.0225 m-7897.7227 8616.1455 -7897.7583 8616.2129 -7897.9326 8616.209 C-7897.9453 8616.1318 -7897.8877 8616.0928 -7897.8521 8616.0225 Cf-7897.7456 8615.6904 m-7897.6211 8615.6865 -7897.5591 8615.7725 -7897.4985 8615.8564 C-7897.5029 8615.7305 -7897.7871 8615.9346 -7897.7456 8615.6904 Cf-7894.4893 8616.1143 m-7894.4111 8616.1025 -7894.2417 8615.9814 -7894.1689 8616.1436 C-7894.2505 8616.0303 -7894.5498 8616.3281 -7894.4893 8616.1143 Cf-7892.9761 8615.8936 m-7892.9272 8615.9033 -7892.9072 8615.9297 -7892.8506 8615.8896 C-7892.7607 8615.9561 -7892.8555 8616.0625 -7892.9312 8616.0762 C-7892.9761 8615.8936 Lf-7865.4287 8615.3076 m-7865.5923 8615.3799 L-7865.5684 8615.2354 L-7865.4287 8615.3076 Lf-7853.3574 8615.2998 m-7853.1943 8615.208 -7853.2441 8615.4365 -7853.2168 8615.458 C-7853.3643 8615.4736 -7853.1621 8615.2783 -7853.3574 8615.2998 Cf-7846.8486 8614.5713 m-7846.8984 8614.5752 L-7846.8818 8614.2754 L-7846.8486 8614.5713 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Auu0 O0 J 0 j 1 w 4 M []0 d0 XR475.8516 446.729 m496.3555 465.1606 L502.2939 457.9316 L482.1025 439.7798 L480.458 438.3037 477.918 438.4409 476.4463 440.0786 C475.5566 441.0781 L474.0742 442.7168 474.2119 445.2515 475.8516 446.729 CBb1 (Unnamed gradient 13) 487.4873 437.0537 86.1861 62.7215 1 0 0 1 0 0 Bg4.17204 62.5826 31.1067 -2.07371 471.7314 438.104 Xm558.5909 8379.1426 31.1067 -2.07371 -86.8594 -7941.0381 Bc4.17204 62.5826 31.1067 -2.07371 471.7314 438.104 Bm558.5909 8379.1426 31.1067 -2.07371 475.9033 500.6865 Bcf0 BB/BBAccumRotation (0.024840) XT*u1 D0 g491.4512 477.3984 m491.0811 462.3882 502.9561 449.9204 517.9697 449.5474 c532.9717 449.1758 545.4473 461.0371 545.8193 476.0459 c546.1904 491.0601 534.3213 503.5317 519.3154 503.9048 c504.3086 504.2783 491.8271 492.4116 491.4512 477.3984 cf/BBAccumRotation (0.024840) XT0 D496.0205 477.2876 m496.334 489.7783 506.708 499.6504 519.2021 499.3418 c531.6885 499.0317 541.5674 488.6543 541.2559 476.1621 c540.9502 463.6719 530.5635 453.8022 518.0801 454.1094 c505.582 454.4209 495.7119 464.7969 496.0205 477.2876 cBb1 (Unnamed gradient 13) 515.8652 435.1626 86.1861 62.7211 1 0 0 1 0 0 Bg4.17201 62.5822 59.4559 -3.9636 486.1387 437.1445 Xm559.6058 8394.3672 59.4559 -3.9636 -73.4673 -7957.2236 Bc4.17201 62.5822 59.4559 -3.9636 486.1387 437.1445 Bm559.6058 8394.3672 59.4559 -3.9636 490.3105 499.7266 Bcf0 BB/BBAccumRotation (0.024840) XT*U/BBAccumRotation (0.024840) XT1 Ap514.0654 462.0757 m514.0195 460.1523 515.543 458.5527 517.4707 458.5039 C518.8965 458.4663 L520.8223 458.4175 522.4219 459.9429 522.4668 461.873 C523.2031 491.3701 L523.249 493.2974 521.7285 494.8984 519.8037 494.9473 C518.3711 494.9824 L516.4482 495.0303 514.8467 493.5073 514.8008 491.5796 C514.0654 462.0757 LBb1 (Unnamed gradient 13) 515.8633 435.1631 86.1861 62.7207 1 0 0 1 0 0 Bg4.17198 62.5818 13.7605 -0.917334 508.9834 435.6216 Xm558.9771 8384.9355 13.7605 -0.917334 -49.9937 -7949.3135 Bc4.17198 62.5818 13.7605 -0.917334 508.9834 435.6216 Bm558.9771 8384.9355 13.7605 -0.917334 513.1553 498.2031 Bcf0 BB/BBAccumRotation (0.024840) XT533.2822 472.1572 m535.2109 472.1104 536.8125 473.6318 536.8604 475.5562 C536.8955 476.9844 L536.9414 478.9106 535.4189 480.5107 533.4873 480.562 C503.9893 481.2939 L502.0635 481.3413 500.4619 479.8193 500.416 477.8896 C500.3789 476.4624 L500.3291 474.5366 501.8555 472.938 503.7813 472.8906 C533.2822 472.1572 LBb1 (Unnamed gradient 13) 515.8672 435.1626 86.1861 62.721 1 0 0 1 0 0 Bg4.172 62.5821 40.5925 -2.70608 495.5703 436.5156 Xm558.0831 8371.5264 40.5925 -2.70608 -62.5127 -7935.0107 Bc4.172 62.5821 40.5925 -2.70608 495.5703 436.5156 Bm558.0831 8371.5264 40.5925 -2.70608 499.7422 499.0977 Bcf0 BB/BBAccumRotation (0.024840) XTU0 Ap264.4092 671.9448 m231.4893 694.9507 l228.8828 696.7769 226.7583 695.6802 226.7637 692.4863 C226.772 684.7441 L201.5015 684.7217 l199.2437 684.7144 197.4146 682.8867 197.4175 680.6279 C197.4331 656.5264 l197.4404 654.2676 199.2686 652.4414 201.5278 652.4414 C226.7974 652.4629 L226.8047 644.7168 l226.8066 641.5234 228.9229 640.4272 231.5269 642.2563 C264.4111 665.3223 l267.0254 667.1533 267.0205 670.1143 264.4092 671.9448 CBb1 (Unnamed gradient 6) 230.1763 640.3018 87.1377 62.6601 1 0 0 1 0 0 Bg3.12902 62.582 74.2169 -3.71075 193.3745 642.1416 Xm406.5374 8130.9565 74.2169 -3.71075 -213.1631 -7488.8154 Bc3.12902 62.582 74.2169 -3.71075 193.3745 642.1416 Bm406.5374 8130.9565 74.2169 -3.71075 196.5034 704.7236 Bcf0 BB453.0371 414.0898 m406.2002 414.0898 L397.835 400.6162 384.1719 389.5596 367.3262 382.4951 C385.6846 344.666 L336.7314 374.6943 L331.6895 374.1465 326.5225 373.8945 321.2529 374.0088 c314.8369 374.1484 308.5889 374.7949 302.5635 375.8945 C304.916 364.0674 317.9932 354.6797 326.1006 346.0293 c331.7412 340.0166 325.1055 337.9482 319.6602 335.7412 c317.1719 334.7314 313.7578 334.1465 312.7734 331.21 c311.166 326.4219 321.0205 325.5059 312.8027 321.1064 C318.6162 316.8535 314.8203 314.458 312.5977 311.3555 c312.5 311.2197 312.3975 311.082 312.2939 310.9434 C320.3848 304.0215 329.9531 298.1709 340.624 293.6963 C319.1787 249.5176 L376.3496 284.5898 L382.2383 283.9463 388.2734 283.6523 394.4297 283.7861 c453.9971 285.0918 501.4814 323.6328 500.4941 369.8994 c499.8779 398.915 480.3369 424.0732 451.1602 438.4907 C450.7734 436.0386 450.5098 433.5522 450.4268 431.022 c450.2402 425.5024 450.9131 419.4258 453.0371 414.0898 CBb1 (Unnamed gradient 24) 397.3438 268.2861 87.6747 152.1068 1 0 0 1 0 0 Bg6.17151 151.9816 204.7063 -8.3125 296.3584 272.3867 Xm337.9881 8323.4082 204.7063 -8.3125 -41.6299 -8051.0205 Bc6.17151 151.9816 204.7063 -8.3125 296.3584 272.3867 Bm337.9881 8323.4082 204.7063 -8.3125 302.5303 424.3682 Bcf0 BB144.8525 524.4375 m139.5806 549.519 136.4287 594.4985 178.145 611.0918 C164.1294 620.1899 146.2593 625.8418 126.6792 626.2524 c80.7861 627.2451 42.957 599.1479 42.1987 563.5029 c41.71 540.5801 56.6807 520.1353 79.6265 508.186 C82.5059 510.9087 85.9551 513.3716 90.0957 515.5425 c106.1167 523.9429 126.3999 526.2012 144.8525 524.4375 CBb1 (Unnamed gradient 13) 120.2529 505.0903 97.1806 133.5139 1 0 0 1 0 0 Bg-16.6888 132.4667 147.0161 18.5218 45.3545 495.6543 Xm-1002.8608 7960.1792 147.0161 18.5218 1048.2148 -7464.5244 Bc-16.6888 132.4667 147.0161 18.5218 45.3545 495.6543 Bm-1002.8608 7960.1792 147.0161 18.5218 28.6655 628.1211 Bcf0 BB208.4282 559.9395 m208.0229 541.335 197.5112 524.8003 181.0317 513.3726 C206.8633 497.0615 208.8755 466.811 206.0176 444.0391 C207.0464 444.2378 208.0879 444.4282 209.1533 444.6025 c215.9731 445.7173 223.1763 446.3057 230.4487 446.2715 C230.4468 446.7627 230.4214 447.251 230.4321 447.7432 c231.1895 483.2617 265.0605 512.02 308.8125 516.811 C309.5928 518.1489 309.3408 519.834 307.1875 522.1299 c298.8906 530.98 285.1143 540.6426 284.4658 553.1357 c283.251 576.5352 280.8389 596.4336 258.7373 608.0215 c240.3545 617.6631 216.3555 619.2183 195.9536 615.8867 c189.2622 614.7939 183.354 613.1641 178.145 611.0918 C196.9937 598.8579 208.8599 580.3818 208.4282 559.9395 cBb1 (Unnamed gradient 24) 237.7427 456.5444 86.8551 140.6221 1 0 0 1 0 0 Bg7.71464 140.4103 140.1382 -7.69969 167.8618 460.3838 Xm447.8268 8150.6768 140.1382 -7.69969 -279.9648 -7690.293 Bc7.71464 140.4103 140.1382 -7.69969 167.8618 460.3838 Bm447.8268 8150.6768 140.1382 -7.69969 175.5767 600.7939 Bcf0 BB0 0.360784 0.72549 0 1 0.690196 0.352941 Xa230.4321 447.7432 m230.4214 447.251 230.4468 446.7627 230.4487 446.2715 C237.6563 446.2393 244.9292 445.5874 251.9727 444.2158 C253.1943 446.6572 254.8018 448.9429 256.8999 450.9771 c261.9395 455.8652 269.5 456.1738 276.0352 457.2476 c279.3594 457.7949 282.2764 458.6797 285.6211 459.0244 c295.4307 460.0405 296.2813 466.9385 294.252 475.5806 c293.6191 478.2778 291.1895 480.6514 291.3662 483.5205 c291.4951 485.6465 293.1396 487.4707 294.3438 489.1494 c296.4561 492.1006 300.0674 494.3794 294.5391 498.4238 C302.3525 502.6084 292.9834 503.4805 294.5117 508.0332 c295.4473 510.8257 298.6934 511.3818 301.0596 512.3423 c304.1602 513.5996 307.6465 514.8145 308.8125 516.811 C265.0605 512.02 231.1895 483.2617 230.4321 447.7432 cf144.8525 524.4375 m147.5742 524.1777 150.2568 523.8345 152.8789 523.4053 c164.4736 521.5122 173.7051 518 181.0317 513.3726 C197.5112 524.8003 208.0229 541.335 208.4282 559.9395 c208.8599 580.3818 196.9937 598.8579 178.145 611.0918 C136.4287 594.4985 139.5806 549.519 144.8525 524.4375 CBb1 (Unnamed gradient 39) 176.1641 516.8887 91.5074 87.9799 1 0 0 1 0 0 Bg-2.31447 87.9495 76.0079 2.00021 136.4985 515.8447 Xm-212.8427 8088.0063 76.0079 2.00021 349.3408 -7572.1611 Bc-2.31447 87.9495 76.0079 2.00021 136.4985 515.8447 Bm-212.8427 8088.0063 76.0079 2.00021 134.1841 603.7944 Bcf0 BBu181.0317 513.3726 m176.2651 510.0674 171.0024 507.1865 165.3354 504.8101 C181.8516 470.7817 L160.4731 483.8975 L137.8179 497.7944 l133.2813 497.2998 128.6338 497.0732 123.8931 497.1753 c107.5239 497.5332 92.3535 501.5586 79.6265 508.186 c67.1333 496.3745 65.3545 479.6709 64.3677 460.6543 c63.7192 448.1626 49.9424 438.5 41.6465 429.6504 c36.2827 423.9297 42.5928 421.9619 47.772 419.8623 c50.1396 418.9014 53.3862 418.3447 54.3218 415.5537 c55.8501 411 46.48 410.1279 54.2949 405.9424 c48.7651 401.8975 52.3755 399.6211 54.4907 396.667 c55.6938 394.9893 57.3374 393.166 57.4678 391.04 c57.6436 388.1719 55.2139 385.7969 54.5811 383.1016 c52.5518 374.458 53.4028 367.5596 63.2119 366.5449 c66.5571 366.1992 69.4727 365.3154 72.7974 364.7686 c79.3325 363.6924 86.894 363.3857 91.9326 358.4971 c102.1846 348.5508 101.2954 332.8203 95.8716 320.502 C164.3818 320.502 l162.1724 325.3096 160.2319 330.1797 158.7715 335.1738 c153.6738 352.5957 139.5474 409.957 180.6084 434.7158 c187.4482 438.8398 195.8198 442.0586 206.0176 444.0391 c208.8755 466.811 206.8633 497.0615 181.0317 513.3726 CBb1 (Unnamed gradient 6) 127.9141 316.1475 92.0771 201.4382 1 0 0 1 0 0 Bg-7.30102 201.3058 177.9167 6.45274 38.3081 312.8975 Xm-291.2564 8030.6035 177.9167 6.45274 329.5645 -7717.7061 Bc-7.30102 201.3058 177.9167 6.45274 38.3081 312.8975 Bm-291.2564 8030.6035 177.9167 6.45274 31.0073 514.2031 Bcf0 BBUu165.3354 504.8101 m171.0024 507.1865 176.2651 510.0674 181.0317 513.3726 c173.7051 518 164.4736 521.5122 152.8789 523.4053 c150.2568 523.8345 147.5742 524.1777 144.8525 524.4375 c126.3999 526.2012 106.1167 523.9429 90.0957 515.5425 c85.9551 513.3716 82.5059 510.9087 79.6265 508.186 c92.3535 501.5586 107.5239 497.5332 123.8931 497.1753 c128.6338 497.0732 133.2813 497.2998 137.8179 497.7944 C160.4731 483.8975 L181.8516 470.7817 L165.3354 504.8101 LBb1 (Unnamed gradient 30) 131.6816 475.6245 92.2026 60.221 1 0 0 1 0 0 Bg-2.31448 60.1765 105.4523 4.05585 78.9551 473.5967 Xm-309.3651 8043.5024 105.4523 4.05585 388.3203 -7569.9053 Bc-2.31448 60.1765 105.4523 4.05585 78.9551 473.5967 Bm-309.3651 8043.5024 105.4523 4.05585 76.6406 533.7729 Bcf0 BBU455.8535 565.8247 m452.9316 565.8872 450.0723 566.1221 447.2559 566.46 C408.7285 545.0566 L423.834 573.0117 L404.7578 581.7803 391.7598 597.6597 390.9131 615.8047 C384.4834 614.2764 378.3105 612.0864 372.668 609.1279 c350.5674 597.54 348.1523 577.6416 346.9404 554.2417 c346.292 541.7485 332.5146 532.0864 324.2178 523.2368 c321.8398 520.7002 321.7627 518.9048 322.8584 517.5049 C323.3555 517.501 323.8506 517.5127 324.3506 517.502 c372.8008 516.4863 411.8848 486.6685 415.0146 449.7544 C428.0781 447.7217 440.292 443.8613 451.1602 438.4907 C455.3604 465.0137 475.8896 487.3369 483.3711 512.9102 c486.3936 523.2354 492.7422 548.3066 487.6582 571.4375 C478.1777 567.6348 467.3418 565.5825 455.8535 565.8247 cBb1 (Unnamed gradient 6) 406.4277 438.9175 90.3274 182.5341 1 0 0 1 0 0 Bg-1.04301 182.5312 175.1427 1.00079 320.2217 438.4248 Xm-47.5303 8317.9746 175.1427 1.00079 367.752 -7879.5498 Bc-1.04301 182.5312 175.1427 1.00079 320.2217 438.4248 Bm-47.5303 8317.9746 175.1427 1.00079 319.1787 620.9561 Bcf0 BB415.2324 443.7847 m414.999 433.1196 411.7744 423.0693 406.2002 414.0898 C453.0371 414.0898 L450.9131 419.4258 450.2402 425.5024 450.4268 431.022 c450.5098 433.5522 450.7734 436.0386 451.1602 438.4907 C440.292 443.8613 428.0781 447.7217 415.0146 449.7544 C415.1807 447.7808 415.2725 445.7944 415.2324 443.7847 cBb1 (Unnamed gradient 30) 430.5986 408.2607 96.0727 36.4643 1 0 0 1 0 0 Bg-3.85758 36.2597 51.0008 5.42584 405.0977 405.5479 Xm-882.0994 8291.3857 51.0008 5.42584 1287.1973 -7885.8369 Bc-3.85758 36.2597 51.0008 5.42584 405.0977 405.5479 Bm-882.0994 8291.3857 51.0008 5.42584 401.2402 441.8076 Bcf0 BBu415.0146 449.7544 m411.8848 486.6685 372.8008 516.4863 324.3506 517.502 c323.8506 517.5127 323.3555 517.501 322.8584 517.5049 c324.2314 515.748 327.458 514.6172 330.3418 513.4497 c332.7119 512.4893 335.958 511.9326 336.8936 509.1406 c338.4219 504.5869 329.0527 503.7134 336.8662 499.5298 c331.3379 495.4844 334.9463 493.2065 337.0615 490.2554 c338.2676 488.5771 339.9102 486.7539 340.04 484.6265 c340.2158 481.7573 337.7861 479.3838 337.1533 476.688 c335.124 468.0435 335.9746 461.1465 345.7822 460.1328 c349.1289 459.7847 352.0449 458.9019 355.3701 458.354 c361.9053 457.2788 369.4648 456.9727 374.5039 452.083 c375.1084 451.4995 375.6621 450.8916 376.1895 450.271 c384.6299 440.2988 383.5508 425.6836 378.4434 414.0898 C406.2002 414.0898 l411.7744 423.0693 414.999 433.1196 415.2324 443.7847 c415.2725 445.7944 415.1807 447.7808 415.0146 449.7544 CBb1 (Unnamed gradient 13) 371.3584 399.9248 91.6211 110.6062 1 0 0 1 0 0 Bg-3.12902 110.5619 94.3104 2.66909 324.2227 398.5908 Xm-233.9333 8265.876 94.3104 2.66909 558.1563 -7867.2861 Bc-3.12902 110.5619 94.3104 2.66909 324.2227 398.5908 Bm-233.9333 8265.876 94.3104 2.66909 321.0938 509.1528 Bcf0 BBU312.8027 321.1064 m321.0205 325.5059 311.166 326.4219 312.7734 331.21 c313.7578 334.1465 317.1719 334.7314 319.6602 335.7412 c325.1055 337.9482 331.7412 340.0166 326.1006 346.0293 c317.9932 354.6797 304.916 364.0674 302.5635 375.8945 C296.8506 376.9355 291.3486 378.3955 286.0957 380.209 C285.0781 375.3467 284.5684 370.3623 284.6758 365.2744 c285.1318 344.2646 295.5215 325.2939 312.2939 310.9434 C312.3975 311.082 312.5 311.2197 312.5977 311.3555 c314.8203 314.458 318.6162 316.8535 312.8027 321.1064 CBb1 (Unnamed gradient 39) 306.915 308.623 90.5786 76.3809 1 0 0 1 0 0 Bg-0.771301 76.377 50.8617 0.513632 283.1938 308.3838 Xm-82.9624 8215.2314 50.8617 0.513632 366.1563 -7906.8486 Bc-0.771301 76.377 50.8617 0.513632 283.1938 308.3838 Bm-82.9624 8215.2314 50.8617 0.513632 282.4224 384.7607 Bcf0 BB298.3877 407.6631 m292.3682 399.2617 288.1426 390.0059 286.0957 380.209 C291.3486 378.3955 296.8506 376.9355 302.5635 375.8945 C302.3848 376.791 302.2607 377.7031 302.2129 378.627 c301.6689 389.1055 300.8906 398.9111 298.3877 407.6631 CBb1 (Unnamed gradient 6) 286.0957 391.7783 0 16.4678 1 0 0 1 0 0 Bg16.4678 0 0 -35.7686 286.0957 409.6631 Xm8197.0957 0 0 -35.7686 -7911 409.6631 Bc16.4678 0 0 -35.7686 286.0957 409.6631 Bm8197.0957 0 0 -35.7686 302.5635 409.6631 Bcf0 BBu312.502 297.0908 m311.8369 299.9268 309.2813 302.4199 309.4639 305.4375 c309.5928 307.501 311.0713 309.2939 312.2939 310.9434 c295.5215 325.2939 285.1318 344.2646 284.6758 365.2744 c284.5684 370.3623 285.0781 375.3467 286.0957 380.209 c288.1426 390.0059 292.3682 399.2617 298.3877 407.6631 c295.0146 419.4609 288.5029 429.3408 275.1611 436.3345 c268.0684 440.0542 260.1768 442.6201 251.9727 444.2158 c244.9292 445.5874 237.6563 446.2393 230.4487 446.2715 c223.1763 446.3057 215.9731 445.7173 209.1533 444.6025 c208.0879 444.4282 207.0464 444.2378 206.0176 444.0391 c204.6929 433.4785 202.3232 424.5273 200.8003 419.3242 c200.1729 417.1826 199.4546 415.0713 198.6748 412.9834 c189.2915 387.8262 170.0376 366.1396 169.1016 338.5371 c168.9146 333.0176 169.8999 325.8389 172.022 320.502 C164.3818 320.502 l175.1719 297.0273 192.5249 275.168 193.4102 249.0801 c193.6055 243.2773 192.896 236.8877 190.6655 231.2764 C269.0898 231.2764 l263.3877 244.2266 262.4521 260.7656 273.2305 271.2236 c278.5293 276.3623 286.4775 276.6846 293.3477 277.8154 c296.8438 278.3916 299.9111 279.3203 303.4277 279.6846 c313.7412 280.751 314.6348 288.002 312.502 297.0908 CBb1 (Unnamed gradient 13) 239.2759 237.7725 90.308 194.007 1 0 0 1 0 0 Bg-1.04303 194.0042 154.0739 0.82835 162.8291 237.3613 Xm-43.8536 8156.8145 154.0739 0.82835 206.6826 -7919.4541 Bc-1.04303 194.0042 154.0739 0.82835 162.8291 237.3613 Bm-43.8536 8156.8145 154.0739 0.82835 161.7861 431.3657 Bcf0 BBUu180.6084 434.7158 m139.5474 409.957 153.6738 352.5957 158.7715 335.1738 c160.2319 330.1797 162.1724 325.3096 164.3818 320.502 C172.022 320.502 l169.8999 325.8389 168.9146 333.0176 169.1016 338.5371 c170.0376 366.1396 189.2915 387.8262 198.6748 412.9834 c199.4546 415.0713 200.1729 417.1826 200.8003 419.3242 c202.3232 424.5273 204.6929 433.4785 206.0176 444.0391 c195.8198 442.0586 187.4482 438.8398 180.6084 434.7158 CBb1 (Unnamed gradient 39) 176.478 331.6621 88.091 92.6296 1 0 0 1 0 0 Bg3.08574 92.5782 69.2604 -2.30853 134.9824 333.0449 Xm269.8004 8094.5391 69.2604 -2.30853 -134.8179 -7761.4941 Bc3.08574 92.5782 69.2604 -2.30853 134.9824 333.0449 Bm269.8004 8094.5391 69.2604 -2.30853 138.0684 425.623 Bcf0 BBUu*u1 D0 g161.8721 250.624 m161.7798 288.6523 L161.7622 293.083 158.144 296.6963 153.7085 296.6699 C90.7593 296.5127 L86.3286 296.4902 82.7261 292.875 82.7393 288.4375 C82.8472 250.4121 L82.856 245.9766 86.4727 242.377 90.917 242.3857 C153.8555 242.5635 L158.2983 242.583 161.8945 246.1943 161.8721 250.624 Cf0 D153.8408 247.5215 m90.9072 247.3418 L89.1919 247.333 87.8076 248.7227 87.8057 250.4365 C87.687 288.4463 L87.6919 290.1563 89.0718 291.5537 90.7769 291.5518 C153.7256 291.7207 L155.4351 291.7266 156.8203 290.3525 156.8247 288.6348 C156.9414 250.6162 L156.9307 248.9063 155.5537 247.5107 153.8408 247.5215 CBb1 (Unnamed gradient 24) 82.7393 269.5283 0 79.1328 1 0 0 1 0 0 Bg79.1328 0 0 -58.3193 82.7393 298.6963 Xm7993.7524 0 0 -58.3193 -7911.0132 298.6963 Bc79.1328 0 0 -58.3193 82.7393 298.6963 Bm7993.7524 0 0 -58.3193 161.8721 298.6963 Bcf0 BB*U152.7466 293.7031 m126.4902 268.2637 L124.2656 266.3027 120.6631 266.292 118.4365 268.2461 C92.0361 293.541 L89.4336 291.4355 L89.498 291.374 86.5972 290.8857 84.0942 293.3574 C114.8369 264.2451 L116.9131 262.4287 119.6279 261.4336 122.4771 261.4355 c125.334 261.4404 128.0337 262.457 130.0981 264.2822 C160.6904 293.5586 L158.4702 291.4375 157.52 293.0215 157.5791 293.0674 C152.7466 293.7031 LBb1 (Unnamed gradient 24) 84.0942 277.5693 0 76.5962 1 0 0 1 0 0 Bg76.5962 0 0 -36.2695 84.0942 295.7031 Xm7995.0942 0 0 -36.2695 -7911 295.7031 Bc76.5962 0 0 -36.2695 84.0942 295.7031 Bm7995.0942 0 0 -36.2695 160.6904 295.7031 Bcf0 BB/BBAccumRotation (0.002735) XT87.3599 245.3545 m87.2998 245.3105 87.2534 245.2559 87.2031 245.2061 C94.561 245.2236 L115.6118 264.124 L111.8032 267.293 L87.3599 245.3545 LBb1 (Unnamed gradient 24) 87.2031 256.249 0 28.4087 1 0 0 1 0 0 Bg28.4087 0 0 -26.0869 87.2031 269.293 Xm7998.2031 0 0 -26.0869 -7911 269.293 Bc28.4087 0 0 -26.0869 87.2031 269.293 Bm7998.2031 0 0 -26.0869 115.6118 269.293 Bcf0 BB/BBAccumRotation (0.002735) XT157.0488 245.4033 m157.0078 245.4443 156.9497 245.5059 156.8994 245.5498 C131.1523 268.415 L127.6792 264.9414 L149.6953 245.3701 L157.0488 245.4033 LBb1 (Unnamed gradient 24) 127.6792 256.8926 0 29.3696 1 0 0 1 0 0 Bg29.3696 0 0 -27.0449 127.6792 270.415 Xm8038.6792 0 0 -27.0449 -7911 270.415 Bc29.3696 0 0 -27.0449 127.6792 270.415 Bm8038.6792 0 0 -27.0449 157.0488 270.415 Bcf0 BB/BBAccumRotation (0.002735) XTUu1 Ap223.9058 331.1553 m223.9238 329.6104 225.3525 328.3857 227.084 328.3965 C239.9536 328.5195 L241.6919 328.5303 243.0947 329.7881 243.0771 331.3213 C243.0771 331.3213 L243.0713 332.8555 241.6436 334.0918 239.9023 334.0781 C227.0391 333.9619 L225.2949 333.9512 223.8975 332.6865 223.9058 331.1553 C223.9058 331.1553 LBb1 (Unnamed gradient 19) 234.1602 310.54 91.8476 97.0402 1 0 0 1 0 0 Bg-3.12863 96.9898 23.2301 0.749341 222.5503 310.166 Xm-262.0327 8123.1978 23.2301 0.749341 484.583 -7813.0322 Bc-3.12863 96.9898 23.2301 0.749341 222.5503 310.166 Bm-262.0327 8123.1978 23.2301 0.749341 219.4219 407.1563 Bcf0 BB/BBAccumRotation (0.008792) XT223.9058 324.0273 m223.9238 322.4805 225.3525 321.2578 227.084 321.2686 C239.9536 321.3887 L241.6919 321.4023 243.0947 322.6582 243.0771 324.1934 C243.0771 324.1934 L243.0713 325.7256 241.6436 326.9609 239.9023 326.9482 C227.0391 326.832 L225.2949 326.8213 223.8975 325.5586 223.9058 324.0273 C223.9058 324.0273 LBb1 (Unnamed gradient 19) 233.9297 310.5313 91.8476 97.0383 1 0 0 1 0 0 Bg-3.12857 96.9878 23.2301 0.749341 222.3203 310.1572 Xm-262.255 8130.0869 23.2301 0.749341 484.5752 -7819.9307 Bc-3.12857 96.9878 23.2301 0.749341 222.3203 310.1572 Bm-262.255 8130.0869 23.2301 0.749341 219.1919 407.1455 Bcf0 BB/BBAccumRotation (0.008792) XT*u0 Ap1 D0 g242.5415 338.8984 m242.1499 344.5039 244.0405 349.375 248.249 353.4678 c253.1255 358.2559 256.3257 361.959 257.8169 364.6016 c259.2979 367.248 260.397 370.2002 261.1084 373.4824 c261.4795 375.4717 261.6787 377.543 261.6602 379.666 c261.5957 387.4736 258.7656 394.0996 253.2393 399.5732 c247.7021 405.0117 240.9917 407.7139 233.1733 407.6455 c233.0928 407.6436 233.0005 407.6475 232.958 407.6436 c232.8804 407.6387 232.79 407.6416 232.7007 407.6436 c232.6523 407.6436 232.5693 407.6367 232.4883 407.6367 c224.6738 407.5713 218.0024 404.7529 212.5669 399.2158 c207.1421 393.6455 204.4297 386.9756 204.4976 379.1641 c204.52 377.041 204.7476 374.9707 205.1606 372.9961 c205.9248 369.7227 207.0757 366.793 208.6094 364.168 c210.1406 361.5488 213.4097 357.9141 218.3726 353.2031 c222.6523 349.1885 224.6211 344.3457 224.3276 338.7412 c224.249 337.209 225.2549 335.998 226.79 336.0088 C240.1299 336.127 L241.6631 336.1426 242.6509 337.376 242.5415 338.8984 cf0 D255.7363 375.4365 m255.541 381.6729 253.5264 387.6641 249.52 392.6426 c245.522 397.6182 240.0962 400.8682 234.0464 402.4014 c231.5825 403.0176 231.5308 403.5439 234.0215 403.6094 c241.8696 403.7979 248.8701 401.1943 253.2983 395.6748 c257.7246 390.1709 258.771 382.7793 256.9043 375.1592 c256.3203 372.7305 255.8228 372.9014 255.7363 375.4365 cBb1 (Unnamed gradient 19) 235.3003 310.5732 91.8476 97.0535 1 0 0 1 0 0 Bg-3.12906 97.003 61.3504 1.979 204.6948 309.5859 Xm-261.8241 8116.7285 61.3504 1.979 466.5186 -7807.1416 Bc-3.12906 97.003 61.3504 1.979 204.6948 309.5859 Bm-261.8241 8116.7285 61.3504 1.979 201.5659 406.5889 Bcf0 BB*UUu1 Ap435.6699 589.8735 m435.7139 588.7632 436.7637 587.9111 438.0049 587.9531 C447.249 588.2954 L448.4951 588.3379 449.4805 589.2695 449.4365 590.3716 C449.4365 590.3716 L449.4014 591.4712 448.3516 592.3306 447.1055 592.2866 C437.8652 591.9497 L436.6123 591.9077 435.6328 590.9741 435.6699 589.8735 C435.6699 589.8735 LBb1 (Unnamed gradient 24) 443.2773 580.5825 94.3432 61.1093 1 0 0 1 0 0 Bg-4.62787 60.9338 17.8022 1.35206 434.3809 579.9067 Xm-632.1219 8322.9688 17.8022 1.35206 1066.5029 -7743.0615 Bc-4.62787 60.9338 17.8022 1.35206 434.3809 579.9067 Bm-632.1219 8322.9688 17.8022 1.35206 429.7529 640.8403 Bcf0 BB/BBAccumRotation (0.036229) XT436.5059 584.2256 m436.5498 583.1191 437.5967 582.2617 438.8408 582.3081 C448.0869 582.6445 L449.334 582.6895 450.3164 583.624 450.2783 584.7246 C450.2783 584.7246 L450.2324 585.8242 449.1855 586.686 447.9375 586.6411 C438.6973 586.3047 L437.4482 586.2617 436.4658 585.3252 436.5059 584.2256 C436.5059 584.2256 LBb1 (Unnamed gradient 24) 443.6855 580.6118 94.3432 61.1146 1 0 0 1 0 0 Bg-4.62827 60.9391 17.7969 1.35166 434.7861 579.936 Xm-632.5842 8329.0547 17.7969 1.35166 1067.3701 -7749.1182 Bc-4.62827 60.9391 17.7969 1.35166 434.7861 579.936 Bm-632.5842 8329.0547 17.7969 1.35166 430.1582 640.875 Bcf0 BB/BBAccumRotation (0.036229) XT*u0 Ap1 D0 g448.9043 595.8027 m448.5117 599.8218 449.7754 603.3574 452.7158 606.3804 c456.124 609.915 458.3506 612.6377 459.3691 614.5664 c460.3818 616.4966 461.1113 618.6392 461.5586 621.0098 c461.7852 622.4473 461.8877 623.9365 461.834 625.4639 c461.6309 631.0703 459.4697 635.7729 455.3896 639.5967 c451.3086 643.3926 446.4346 645.2031 440.8184 644.9971 c440.7617 644.9961 440.6934 644.9961 440.6641 644.9932 c440.6104 644.9883 440.543 644.9883 440.4775 644.9883 c440.4453 644.9883 440.3857 644.9824 440.3262 644.9771 c434.7158 644.7788 429.9795 642.6211 426.1816 638.5371 c422.3975 634.4312 420.5801 629.5845 420.7822 623.9756 c420.8389 622.4512 421.0449 620.9688 421.3809 619.5571 c421.9941 617.2217 422.8789 615.1416 424.0313 613.2837 c425.1836 611.4346 427.6016 608.8872 431.2617 605.6006 c434.4131 602.8008 435.9258 599.3623 435.8223 595.3311 c435.7949 594.228 436.5449 593.376 437.6426 593.415 C447.2266 593.7646 L448.3242 593.8042 449.0127 594.7095 448.9043 595.8027 cf0 D457.6602 622.3096 m457.3984 626.7847 455.832 631.0483 452.8555 634.5449 c449.8857 638.0415 445.9248 640.2666 441.5498 641.248 c439.7666 641.6436 439.7207 642.02 441.5088 642.1162 c447.1406 642.4067 452.2207 640.6748 455.5127 636.7969 c458.7959 632.9321 459.6973 627.6416 458.5068 622.1299 c458.1367 620.374 457.7744 620.4902 457.6602 622.3096 cBb1 (Unnamed gradient 24) 444.6533 580.6831 94.3432 61.1246 1 0 0 1 0 0 Bg-4.62902 60.949 45.1975 3.43271 422.1348 578.9727 Xm-631.8121 8318.8896 45.1975 3.43271 1053.9473 -7739.917 Bc-4.62902 60.949 45.1975 3.43271 422.1348 578.9727 Bm-631.8121 8318.8896 45.1975 3.43271 417.5059 639.9219 Bcf0 BB*UUu427.2178 245.5186 m427.9512 247.165 429.4277 248.293 431.1729 248.3018 C452.8213 248.376 L455.2852 248.376 457.2949 246.1152 457.3066 243.3145 C457.3438 232.6455 L457.3408 229.8408 455.3604 227.5576 452.8828 227.5488 C431.2344 227.4873 L429.7627 227.4814 428.4424 228.3115 427.6338 229.5566 C427.332 229.5273 427.0527 229.4775 426.7354 229.4707 C418.583 229.418 L418.5781 228.9707 L418.5947 224.3037 421.9482 220.5088 426.0576 220.5303 C458.1064 220.6289 L462.2119 220.6533 465.543 224.4482 465.5322 229.1201 C465.4746 246.8955 L465.459 251.5732 462.1045 255.3379 457.9873 255.333 C425.9512 255.2305 L421.8428 255.2197 418.5176 251.415 418.5322 246.7373 C418.5322 245.5059 L426.6787 245.5625 L426.8682 245.5742 427.0342 245.5273 427.2178 245.5186 CBb1 (Unnamed gradient 6) 434.751 196.9004 79.9387 65.6776 1 0 0 1 0 0 Bg11.474 64.6676 54.1676 -9.61099 407.666 201.7061 Xm1454.347 8196.7178 54.1676 -9.61099 -1046.6812 -7995.0127 Bc11.474 64.6676 54.1676 -9.61099 407.666 201.7061 Bm1454.347 8196.7178 54.1676 -9.61099 419.1396 266.374 Bcf0 BB363.5439 245.9199 m363.6006 228.1426 L363.6064 223.4736 366.9521 219.6963 371.0723 219.7002 C403.1084 219.7988 L407.2246 219.8145 410.5547 223.6113 410.5381 228.29 C410.5381 229.3594 L401.7471 229.3086 L400.9814 227.7744 399.5479 226.7402 397.8916 226.7256 C376.2461 226.666 L373.7881 226.6611 371.7695 228.9189 371.7529 231.7256 C371.7324 242.3926 L371.7129 245.1943 373.7148 247.4756 376.1895 247.4844 C397.8271 247.5586 L399.3535 247.5547 400.6777 246.7021 401.4902 245.3984 C410.4814 245.4531 L410.4756 246.0693 L410.4707 250.7402 407.1318 254.5186 403.0049 254.5068 C370.9609 254.4082 L366.8496 254.3887 363.5254 250.6025 363.5439 245.9199 CBb1 (Unnamed gradient 6) 381.582 206.335 79.9387 65.6772 1 0 0 1 0 0 Bg11.4739 64.6672 54.1763 -9.61252 354.4912 211.1416 Xm1446.8767 8154.6162 54.1763 -9.61252 -1092.3857 -7943.4736 Bc11.4739 64.6672 54.1763 -9.61252 354.4912 211.1416 Bm1446.8767 8154.6162 54.1763 -9.61252 365.9648 275.8086 Bcf0 BB432.0811 237.6348 m432.0811 235.4395 430.4443 233.6445 428.416 233.6406 C401.5137 233.4609 L399.4961 233.4521 397.8438 235.2334 397.835 237.4336 c397.8271 239.6426 399.4756 241.4238 401.5029 241.4258 C428.3916 241.6123 L430.418 241.6191 432.0645 239.8438 432.0811 237.6348 C432.0811 237.6348 LBb1 (Unnamed gradient 6) 408.5723 201.5449 79.9387 65.6789 1 0 0 1 0 0 Bg11.4742 64.6689 37.8704 -6.71936 389.6328 204.9053 Xm1448.2323 8162.2563 37.8704 -6.71936 -1058.5996 -7957.3506 Bc11.4742 64.6689 37.8704 -6.71936 389.6328 204.9053 Bm1448.2323 8162.2563 37.8704 -6.71936 401.1074 269.5742 Bcf0 BBU208.0557 640.4458 m189.4736 653.4316 l188.002 654.4629 186.8037 653.8433 186.8066 652.041 C186.811 647.6714 L172.5479 647.6582 l171.2729 647.6533 170.2402 646.6216 170.2422 645.3477 C170.2505 631.7422 l170.2549 630.4683 171.2871 629.4375 172.5625 629.4375 C186.8252 629.4492 L186.8291 625.0771 l186.8311 623.2744 188.0249 622.6553 189.4956 623.688 C208.0566 636.708 l209.5327 637.7407 209.5308 639.4126 208.0557 640.4458 CBb1 (Unnamed gradient 24) 190.6123 619.7661 93.3665 39.415 1 0 0 1 0 0 Bg-2.31453 39.347 43.6579 2.56812 168.9561 618.4922 Xm-475.5656 8084.6021 43.6579 2.56812 644.5215 -7466.1104 Bc-2.31453 39.347 43.6579 2.56812 168.9561 618.4922 Bm-475.5656 8084.6021 43.6579 2.56812 166.6416 657.8394 Bcf0 BBu*u0 0 0 0 1 1 1 Xa400.6592 344.1621 m400.6631 374.8955 425.5703 399.7988 456.2998 399.8008 C456.2998 399.8008 L487.0313 399.7988 511.9395 374.8955 511.9424 344.1621 C511.9424 344.1621 L511.9395 313.4307 487.0313 288.5234 456.2998 288.5234 C456.2998 288.5234 L425.5703 288.5234 400.6631 313.4307 400.6592 344.1621 C400.6592 344.1621 Lf1 D407.3516 344.1621 m407.4033 317.1318 429.2715 295.2637 456.2998 295.2178 C456.2998 295.2178 L483.3311 295.2637 505.1982 317.1318 505.2471 344.1621 C505.2471 344.1621 L505.1982 371.1924 483.3311 393.0586 456.2998 393.1094 C456.2998 393.1094 L429.2715 393.0586 407.4033 371.1924 407.3516 344.1621 C407.3516 344.1621 Lf*U*u0 D455.1152 288.6084 m437.5811 295.4365 425.9219 317.9199 425.8457 344.1465 C425.8457 344.1465 L425.9219 370.3799 437.5811 392.8613 455.1152 399.6865 C455.1152 399.6865 L456.2998 400.1338 L457.4844 399.6865 L475.0205 392.8613 486.6807 370.3799 486.7559 344.1465 C486.7559 344.1465 L486.6807 317.916 475.0205 295.4365 457.4844 288.6084 C457.4844 288.6084 L456.2998 288.1621 L455.1152 288.6084 L455.1152 288.6084 Lf1 D432.5381 344.1465 m432.4678 320.5107 443.2158 301.0039 456.2998 295.3447 C456.2998 295.3447 L469.3867 301.0039 480.1338 320.5127 480.0625 344.1465 C480.0625 344.1465 L480.1338 367.7832 469.3867 387.2891 456.2998 392.9512 C456.2998 392.9512 L443.2158 387.2891 432.4678 367.7832 432.5381 344.1465 C432.5381 344.1465 Lf*U0 D404.0254 340.8135 m404.0254 347.5059 L509.4512 347.5059 L509.4512 340.8135 L404.0254 340.8135 L404.0254 340.8135 Lf409.8779 366.335 m409.8779 373.0264 L502.7529 373.0264 L502.7529 366.335 L409.8779 366.335 L409.8779 366.335 Lf409.8779 315.2949 m409.8779 321.9873 L502.7529 321.9873 L502.7529 315.2949 L409.8779 315.2949 L409.8779 315.2949 Lf452.9531 291.0107 m452.9531 396.4502 L459.6484 396.4502 L459.6484 291.0107 L452.9531 291.0107 L452.9531 291.0107 LfU*u1 D145.6484 588.4258 m145.6445 591.3911 143.2422 593.7939 140.2773 593.7876 C105.6997 593.75 L102.7363 593.7476 100.3354 591.3398 100.3374 588.3765 C100.376 553.8022 L100.3789 550.8359 102.7827 548.4331 105.7476 548.4395 C140.3252 548.4766 L143.291 548.48 145.6895 550.8867 145.6875 553.8486 C145.6484 588.4258 Lf0 D109.2314 552.2939 m106.3853 552.2915 104.0732 554.5957 104.0693 557.4414 c104.0674 560.2925 106.3726 562.6025 109.2207 562.6055 c112.0659 562.6108 114.3779 560.3047 114.3809 557.4556 c114.3862 554.6064 112.0762 552.2939 109.2314 552.2939 cf127.3389 552.2773 m124.439 552.2773 L123.1836 552.2744 122.1836 553.2949 122.0264 554.5371 c121.5332 558.5483 119.7383 562.2476 116.853 565.1367 c113.9766 568.0229 110.2998 569.814 106.3271 570.3066 c105.0825 570.46 104.0586 571.4634 104.0581 572.7173 C104.0557 575.6182 L104.0552 576.8696 105.0728 577.8989 106.3198 577.792 c118.5977 576.7134 128.4136 566.876 129.5088 554.5493 c129.6216 553.3008 128.5933 552.2827 127.3389 552.2773 Cf140.4893 552.2861 m137.5884 552.2803 L136.3345 552.2803 135.3228 553.2983 135.2339 554.5493 c134.1084 570.0498 121.7456 582.4575 106.3262 583.562 c105.0757 583.6479 104.0566 584.6572 104.0557 585.9111 C104.0522 588.812 L104.0513 590.0693 105.0664 591.0918 106.3188 591.0195 c125.8428 589.8994 141.54 574.165 142.6938 554.5581 c142.7661 553.3032 141.7422 552.2861 140.4893 552.2861 Cf*Uu157.3735 448.334 m157.3735 455.3535 151.1563 461.2329 142.7715 462.8711 C141.9004 452.8262 132.2588 444.6934 119.8833 443.2461 C122.5698 437.4644 129.6777 433.3257 138.0483 433.3257 c138.9009 433.3257 139.7422 433.3755 140.5664 433.4565 C151.6895 426.9619 L147.4531 435.2261 L153.3701 437.79 157.3735 442.6958 157.3735 448.334 cf1 Ap140.1235 464.8472 m140.1235 454.4219 129.2427 445.9741 115.8184 445.9741 c102.3936 445.9741 91.5117 454.4219 91.5117 464.8472 c91.5117 475.27 102.3936 483.7202 115.8184 483.7202 c129.2427 483.7202 140.1235 475.27 140.1235 464.8472 cBb1 (Unnamed gradient 13) 91.5117 464.8472 0 48.6118 1 0 0 1 0 0 Bg48.6118 0 0 -41.7461 91.5117 485.7202 Xm8002.5117 0 0 -41.7461 -7911 485.7202 Bc48.6118 0 0 -41.7461 91.5117 485.7202 Bm8002.5117 0 0 -41.7461 140.1235 485.7202 Bcf0 BB0 Ap106.9976 454.2275 m98.6602 437.9688 l127.541 454.8389 l106.9976 454.2275 lBb1 (Unnamed gradient 13) 98.6602 446.4038 0 28.8809 1 0 0 1 0 0 Bg28.8809 0 0 -20.8701 98.6602 456.8389 Xm8009.6606 0 0 -20.8701 -7911.0005 456.8389 Bc28.8809 0 0 -20.8701 98.6602 456.8389 Bm8009.6606 0 0 -20.8701 127.541 456.8389 Bcf0 BB1 Ap0 0 0 0 1 1 1 Xa130.1904 470.4873 m130.1904 469.8433 129.668 469.3213 129.0234 469.3213 C101.8184 469.3213 L101.1743 469.3213 100.6499 469.8433 100.6499 470.4873 C100.6499 470.4873 L100.6499 471.1309 101.1743 471.6519 101.8184 471.6519 C129.0234 471.6519 L129.668 471.6519 130.1904 471.1309 130.1904 470.4873 C130.1904 470.4873 Lf130.1904 465.2676 m130.1904 464.624 129.668 464.0991 129.0234 464.0991 C101.8184 464.0991 L101.1743 464.0991 100.6499 464.624 100.6499 465.2676 C100.6499 465.2676 L100.6499 465.9092 101.1743 466.4336 101.8184 466.4336 C129.0234 466.4336 L129.668 466.4336 130.1904 465.9092 130.1904 465.2676 C130.1904 465.2676 Lf130.1904 460.0474 m130.1904 459.4048 129.668 458.8823 129.0234 458.8823 C101.8184 458.8823 L101.1743 458.8823 100.6499 459.4048 100.6499 460.0474 C100.6499 460.0474 L100.6499 460.6924 101.1743 461.2129 101.8184 461.2129 C129.0234 461.2129 L129.668 461.2129 130.1904 460.6924 130.1904 460.0474 C130.1904 460.0474 LfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF